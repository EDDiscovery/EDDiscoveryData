ACTIONFILE V4

ENABLED True

INSTALL LongDescription="Dies ist die zweite Ausgabe des Joystick-, Tastatur- und Mauspakets für EDD für Version 8.3+\r\n\r\nEs spricht Ereignisse an, die durch Joystick-, Tasten- und Mausbindungen verursacht werden."
INSTALL ShortDescription="German JKM Pack for ED"
INSTALL Version=2.0.0.0
INSTALL MinEDVersion=8.3.0.0
INSTALL Location=Actions
INSTALL DisableOther1=JKMV2

EVENT onStartup, onStartup, "", Condition AlwaysTrue
EVENT onPostStartup, onPostStartup, "", Condition AlwaysTrue
EVENT onInstall, onInstall, "", Condition AlwaysTrue
EVENT onMenuItem, Menus, "", MenuName Contains jkmMenu
EVENT onEliteInput, TurnOn, "", Condition AlwaysTrue
EVENT onSayFinished, FinishSpeech, "", EventName $== JKMFinish

//*************************************************************
// SetUpLanguageGerman
//*************************************************************
PROGRAM SetUpLanguageGerman

Static jkm_install $= Elite Dangerous Discovery, Joystick, Keyboard, Mouse Pack 2, Deutsche Version installiert

Rem naming convention jkm_Bindingname or jmk_N_Bindingname or jmp_H_Bindingname.  Use N = normal space only, H = hyperspace only

Static jkm_N_ShipSpotLightToggle $= Umschalten der Schiffsbeleuchtung
Static jkm_N_ToggleDriveAssist $= Umschalten der Fahrhilfe
Static jkm_N_AutoBreakBuggyButton $= Umschalten SRV Bremse
Static jkm_N_ToggleBuggyTurretButton $= Umschalten SRV Turm

Rem no power, cause it just goes crazy.. instead just plop them under a single POWER entry
// Static jkm_IncreaseEnginesPower_Buggy $= "Increase power to Engines"
// Static jkm_IncreaseWeaponsPower_Buggy $= "Increase power to Weapons"
// Static jkm_IncreaseSystemsPower_Buggy $= "Increase power to Systems"
// Static jkm_ResetPowerDistribution_Buggy = "Reset SRV power system"
// Static jkm_IncreaseEnginesPower $= "Increase power to Engines"
// Static jkm_IncreaseWeaponsPower $= "Increase power to Weapons"
// Static jkm_IncreaseSystemsPower $= "Increase power to Systems"
// Static jkm_ResetPowerDistribution $= "Reset ship power distribution"
Static jkm_powerbindings $= IncreaseEnginesPower_Buggy,IncreaseSystemsPower_Buggy,IncreaseWeaponsPower_Buggy,ResetPowerDistribution_Buggy,IncreaseEnginesPower,IncreaseWeaponsPower,IncreaseSystemsPower,ResetPowerDistribution
Static jkm_Power = Einstellen der Leistung;Ändern der Leistungszuweisung

// Static jkm_ToggleFlightAssist $= ""
Static jkm_N_LandingGearToggle $= Fahrwerk
Static jkm_N_ToggleButtonUpInput $= Schleichfahrt
Static jkm_N_ToggleCargoScoop $= Frachtschaufel
Static jkm_TargetNextRouteSystem $= Ausgewählte vorhandene Route
Static jkm_OrbitLinesToggle $= Umlaufbahnlinien umschalten
Static jkm_GalaxyMapOpen $= Galaxiekarte umschalten
Static jkm_SystemMapOpen $= Systemkarte umschalten

Static jkm_SetSpeedMinus100 $= Voll voraus!
Static jkm_SetSpeedMinus75 $= Dreiviertel Achtern!
Static jkm_SetSpeedMinus50 $= Halbe Achtern!
Static jkm_SetSpeedMinus25 $= Viertel Achtern!
Static jkm_SetSpeedZero $= Maschine Stopp!
Static jkm_SetSpeed25 $= Voraus Kleine!;Viertelgeschwindigkeit, Kapitän
Static jkm_SetSpeed50 $= Voraus Halbe!;Halb voraus Käpt'n
Static jkm_SetSpeed75 $= Voraus Große!;Drei Viertel voraus Käpt'n
Static jkm_SetSpeed100 $= Äußerste Kraft Voraus!;Maximale Geschwindigkeit
Static jkm_N_UseBoostJuice $= Nachbrenner
Static jkm_EngineColourToggle $= Strahlfarbe umschalten

Static jkm_DeployHardpointToggle $= Waffen umschalten
Static jkm_CycleFireGroupPrevious $= Letzte Feuergruppe
Static jkm_CycleFireGroupNext $= Nächste Feuergruppe
Static jkm_CycleNextSubsystem $= Nächstes Zielsubsystem
Static jkm_CyclePreviousSubsystem $= Vorheriges Zielsubsystem
Static jkm_CycleNextTarget $= Nächstes Ziel
Static jkm_CyclePreviousTarget $= Vorheriges Ziel
Static jkm_SelectTarget $= Ziel auswählen
Static jkm_CycleNextHostileTarget $= Nächster Feind
Static jkm_CyclePreviousHostileTarget $= Vorheriger Feind
Static jkm_SelectHighestThreat $= Höchste Bedrohung
Static jkm_WeaponColourToggle $= Waffenbfarbe umschalten

Static jkm_DeployHeatSink $= Kühlkörper werfen
Static jkm_N_UseShieldCell $= Schildzelle entladen
Static jkm_N_FireChaffLauncher $= Düppel werfen
Static jkm_N_ChargeECM $= ECM aufladen

Static jkm_TargetWingman0 $= Flügelmann 1 auswählen
Static jkm_TargetWingman1 $= Flügelmann 2 auswählen
Static jkm_TargetWingman2 $= Flügelmann 3 auswählen
Static jkm_SelectTargetsTarget $= Wähle ein Flügelmann-Ziel aus
Static jkm_WingNavLock $= Flügelmann Navigationsziel umschalten

Static jkm_MicrophoneMute $= Mikrofon stumm umschalten

Static jkm_FocusLeftPanel $= Navigation
Static jkm_FocusRightPanel $= System
Static jkm_FocusRadarPanel $= Rollen
Static jkm_QuickCommsPanel $= Kommunikation
Static jkm_FocusCommsPanel $= Kommunikation
Static jkm_UIFocus $= Bedienfeld umschalten
Static jkm_HeadLookToggle $= Kopfsicht umschalten
Static jkm_FriendsMenu $= Freundesmenü
Static jkm_PhotoCameraToggle $= Kamera

Static jkm_N_OrderRequestDock $= Kampfschiff andocken anfordern
Static jkm_N_OrderDefensiveBehaviour $= Defensiver Modus
Static jkm_N_OrderAggressiveBehaviour $= Agressiver Modus
Static jkm_N_OrderFocusTarget $= Greife ausgewähltes Ziel an
Static jkm_N_OrderHoldFire $= Nicht schießen
Static jkm_N_OrderHoldPosition $= Position halten
Static jkm_N_OrderFollow $= Mir nach!
Static jkm_N_OpenOrders $= offene Aufträge

Static jkm_UI $= UI_Select,UI_Up,UI_Down,UI_Left,UI_Right,CyclePreviousPanel,CycleNextPanel

Static jkmSpeechCulture = de-de

END PROGRAM

//*************************************************************
// SetUpLanguage
//*************************************************************
PROGRAM SetUpLanguage

Rem do these.. If %(CurrentCulture) Contains sv
Call SetUpLanguageGerman

END PROGRAM

//*************************************************************
// onStartup
// Events: onStartup
//*************************************************************
PROGRAM onStartup

Print Deutsches JKM Pack installiert

Call SetUpLanguage
Call Initialise

END PROGRAM

//*************************************************************
// onPostStartup
// Events: onPostStartup
//*************************************************************
PROGRAM onPostStartup

MenuItem VoiceMenuConfigureVoice                                // see of voice menu installed..
If MenuPresent IsFalse
    MenuItem jkmMenuVoice,add-ons,"GJKM Voice Synthesis Configuration",speaker
    // MenuItem jkmMenuJoystick,add-ons,"List Joystick and Binding Information",speaker
    MenuItem VoiceMenuConfigureSpeechFile,add-ons,"GJKM Edit speech file",missioncompleted

END PROGRAM

//*************************************************************
// onInstall
// Events: onInstall
//*************************************************************
PROGRAM onInstall

If InstallList Contains JKMV
    Call SetUpLanguage
    Call Initialise
    Say %(jkm_install)
    MenuItem jkmMenuVoice,add-ons,"Voice Synthesis Configuration",speaker
    MessageBox "Da es nicht möglich ist, den UI-Modus von Elite (Normal, Galaxiekarte, Systemmenü usw.) genau zu bestimmen, ist es notwendig, die Sprachausgabe für Bindungen zu deaktivieren, die auf dieselben UI-Tasten gelegt werden.\r\n\r\nSie können auch Sprachanweisungen hören, wenn Sie Tasten, die in Galaxie-/Planetenkarten oder Holo-Me verwendet werden, auf Tasten legen, die im normalen Modus verwendet werden und die eine Sprachausgabe haben.\r\n\r\nAlle Sprachanweisungen sind im angedockten Zustand deaktiviert.", "UI Key Warning", OK, Warning

END PROGRAM

//*************************************************************
// Initialise
//*************************************************************
PROGRAM Initialise

Perform EnableEliteInputNoAxis
Static jkm_lastbinding = None
Static jkm_lastbindingtime = 0
Static jkm_speaking = 0

Perform listeliteinput
Print %(EliteInputCheck)

END PROGRAM

//*************************************************************
// Menus
// Events: onMenuItem?(MenuName Contains jkmMenu)
//*************************************************************
PROGRAM Menus

If MenuName Contains jkmMenuVoice
    Perform ConfigureVoice "Configure Voice Synthesis"
If MenuName Contains jkmMenuJoystick
    EliteBindings *
    Perform listeliteinput
    InfoBox "Check:\r\n%(EliteInputCheck)\r\nBindings:\r\n%(EB_Text)\r\nDevices:\r\n%(EliteInput)", "Elite Bindungen und Joystick Information"

END PROGRAM

//*************************************************************
// TurnOn
// Events: onEliteInput
//*************************************************************
PROGRAM TurnOn

// Print
// Print %(Device), %(Binding), List: %(BindingList), EventName:%(EventName) Pressed:%(Pressed) Value:%(Value)

// Debug this. Use Event THPOS and move the cursor to check various points.
Event Last

If EC_DockedState IsPresent And EC_DockedState IsTrue           // Docked, don't do anything
    End 

If Binding IsOneOf %(jkm_powerbindings)                         // if power binding, alter to generic name
    Set Binding = Power

Set v = jkm_%(Binding)                                          // make up variable name from event name

If %(v) NotPresent And EC_Hyperspace IsPresent                  // if not present, and we have a hyperspace flag (just in case)
    If EC_Hyperspace IsFalse                                    // select alternate name of hyperspace flag
        Set v = jkm_N_%(Binding)
    Else 
        Set v = jkm_H_%(Binding)

If %(v) IsPresent And %(v) IsNotEmpty                           // we have a binding
    If BindingList AnyOfAny %(jkm_UI)
        // Print Key is a UI key - can't tell what mode we are in. ignoring
    Else If Binding $!= %(jkm_lastbinding) Or "%eval(\"%TickCount()-%(jkm_lastbindingtime)\")" > 2000
        Set speech = "%phrase(\"%indirect(v)\")"                // now expand any phrases in it
        Call speak(speech="%(speech)",Priority="Low")
        // print Say %(speech)  %TickCount() %(jkm_lastbindingtime)
        Static jkm_lastbinding = %(Binding)
        Static jkm_lastbindingtime = %TickCount()
    Else 
        Static jkm_lastbindingtime = %TickCount()
        // Print rejected due to duplicate binding in less than X second %TickCount() %(jkm_lastbindingtime)

END PROGRAM

//*************************************************************
// speak
//*************************************************************
PROGRAM speak

Rem speech always, optional: Volume, Priority, FinishEvent, Wait

Set speech = "%replacevar(speech,\"jkm_tx\")"

Set ds = 0
If SpeechOptions IsPresent And SpeechOptions Contains PrintOnly;
    Set ds = 1

// Real time, don't bother if its more than 3s of queued speech

Say %(speech), QueueLimit=3000, Literal=1, Volume="%existsdefault(Volume,\"-999\")", Priority="%existsdefault(Priority,\"Normal\")", DontSpeak="%(ds)", FinishEvent="JKMFinish" , Wait="%existsdefault(Wait,\"0\")"
Static jkm_speaking = 1

// Print Say %(speech)

If SpeechLog IsPresent And SpeechLog IsNotEmpty
    If SpeechOptions IsPresent And SpeechOptions Contains LogLastOnly;
        Let success = %openfile(h1,SpeechLog,create)
    Else 
        Let success = %openfile(h1,SpeechLog,append)

    If success IsTrue
        If SpeechOptions IsPresent And SpeechOptions Contains LogTimeDate;
            Expr %write(h1,"%datetimenow(tolocal):")

        Expr %writeline(h1,speech)
        Expr %closefile(h1)
    Else 
        Print Cannot write to speech log file '%(SpeechLog)'

END PROGRAM

//*************************************************************
// FinishSpeech
// Events: onSayFinished?(EventName $== JKMFinish)
//*************************************************************
PROGRAM FinishSpeech

// Holding this for later work
Static jkm_speaking = 0

END PROGRAM

