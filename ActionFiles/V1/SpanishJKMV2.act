ACTIONFILE V4

ENABLED True

INSTALL LongDescription="Esta es la segunda edicion del paquete Joystick. Teclado y Ratón para EDD, para versión 8.3+\r\n\r\nVocaliza los eventos causados por enlaces de joystick, teclas y ratón."
INSTALL ShortDescription="Paquete JKM para ED"
INSTALL Version=2.0.0.0
INSTALL MinEDVersion=8.3.0.0
INSTALL Location=Actions
INSTALL DisableOther1=JKMV1
INSTALL DisableOther2=JKMV2

EVENT onStartup, onStartup, "", Condition AlwaysTrue
EVENT onPostStartup, onPostStartup, "", Condition AlwaysTrue
EVENT onInstall, onInstall, "", Condition AlwaysTrue
EVENT onMenuItem, Menus, "", MenuName Contains jkmMenu
EVENT onEliteInput, TurnOn, "", Condition AlwaysTrue
EVENT onSayFinished, FinishSpeech, "", EventName $== JKMFinish

//*************************************************************
// SetUpLanguageSpanish
//*************************************************************
PROGRAM SetUpLanguageSpanish

Static jkm_install $= Ha instalado el paquete Joystick, Teclado y Ratón v2 para Elite Dangerous Discovery English, version en español

Rem naming convention jkm_Bindingname or jmk_N_Bindingname or jmp_H_Bindingname.  Use N = normal space only, H = hyperspace only

Static jkm_N_ShipSpotLightToggle $= Alternar luces de la nave
Static jkm_N_ToggleDriveAssist $= Alternar el asistente
Static jkm_N_AutoBreakBuggyButton $= Alternar freno VRS
Static jkm_N_ToggleBuggyTurretButton $= Alternar torreta VRS

Rem no power, cause it just goes crazy.. instead just plop them under a single POWER entry
// Static jkm_IncreaseEnginesPower_Buggy $= "Aumentar la potencia de los motores"
// Static jkm_IncreaseWeaponsPower_Buggy $= "Aumentar la potencia de las armas"
// Static jkm_IncreaseSystemsPower_Buggy $= "Aumentar la potencia de los sistemas"
// Static jkm_ResetPowerDistribution_Buggy = "Restablecer el sistema de alimentación VRS"
// Static jkm_IncreaseEnginesPower $= "Aumentar la potencia de los motores"
// Static jkm_IncreaseWeaponsPower $= "Aumentar la potencia de las armas"
// Static jkm_IncreaseSystemsPower $= "Aumentar la potencia de los sistemas"
// Static jkm_ResetPowerDistribution $= "Restablecer el sistema de alimentación de la nave"
Static jkm_powerbindings $= IncreaseEnginesPower_Buggy,IncreaseSystemsPower_Buggy,IncreaseWeaponsPower_Buggy,ResetPowerDistribution_Buggy,IncreaseEnginesPower,IncreaseWeaponsPower,IncreaseSystemsPower,ResetPowerDistribution
Static jkm_Power = Ajuste de potencia;Modificación de la distribución de energía

// Static jkm_ToggleFlightAssist $= ""
Static jkm_N_LandingGearToggle $= Alternar tren de aterrizaje
Static jkm_N_ToggleButtonUpInput $= Alternar funcionamiento silencioso
Static jkm_N_ToggleCargoScoop $= Alternar escotilla de carga
Static jkm_TargetNextRouteSystem $= Ruta existente seleccionada
Static jkm_OrbitLinesToggle $= Alternar lineas orbitales
Static jkm_GalaxyMapOpen $= Alternar mapa de la galaxia
Static jkm_SystemMapOpen $= Alternar mapa del sistema

Static jkm_SetSpeedMinus100 $= Todo atrás
Static jkm_SetSpeedMinus75 $= Atrás 75 porciento 
Static jkm_SetSpeedMinus50 $= Atrás 50 porciento 
Static jkm_SetSpeedMinus25 $= Atrás 25 porciento 
Static jkm_SetSpeedZero $= Motores apagados
Static jkm_SetSpeed25 $= Avante 25 pociento;Avante un quarto capitan
Static jkm_SetSpeed50 $= Avante 50 porciento;Avante media capitan
Static jkm_SetSpeed75 $= Avante 75 porciento;Avante tres cuartos capitan
Static jkm_SetSpeed100 $= A toda máquina;Avante toda
Static jkm_N_UseBoostJuice $= Impulsores
Static jkm_EngineColourToggle $= Alternar color de motores

Static jkm_DeployHardpointToggle $= Alternar armas
Static jkm_CycleFireGroupPrevious $= Grupo de fuego anterior
Static jkm_CycleFireGroupNext $= Grupo de fuego siguiente
Static jkm_CycleNextSubsystem $= Siguiente subsistema del objetivo
Static jkm_CyclePreviousSubsystem $= Subsistema del objetivo anterior
Static jkm_CycleNextTarget $= Próximo objetivo
Static jkm_CyclePreviousTarget $= Objetivo anterior
Static jkm_SelectTarget $= Seleccionando objetivo
Static jkm_CycleNextHostileTarget $= Próximo objetivo hostil
Static jkm_CyclePreviousHostileTarget $= Objetivo hostil anterior
Static jkm_SelectHighestThreat $= Mayor amenaza
Static jkm_WeaponColourToggle $= Alternar color de las armas

Static jkm_DeployHeatSink $= Lanzar disipador de calor
Static jkm_N_UseShieldCell $= Discharging Shield Cell
Static jkm_N_FireChaffLauncher $= Fire chaff
Static jkm_N_ChargeECM $= Charging ECM

Static jkm_TargetWingman0 $= Selección compañero 1
Static jkm_TargetWingman1 $= Selección compañero 2
Static jkm_TargetWingman2 $= Selección compañero 3
Static jkm_SelectTargetsTarget $= Selección objetivo compañero
Static jkm_WingNavLock $= Alternar enlace de navegación

Static jkm_MicrophoneMute $= Activar silencio de microfono

Static jkm_FocusLeftPanel $= Cambiar a panel de navegación
Static jkm_FocusRightPanel $= Cambiar a panel de sistema
Static jkm_FocusRadarPanel $= Cambiar a panel de rol
Static jkm_QuickCommsPanel $= Panel de comunicaciones rápidas
Static jkm_FocusCommsPanel $= Panel de comunicación
Static jkm_UIFocus $= Alternar panel
Static jkm_HeadLookToggle $= Alternar vista libre
Static jkm_FriendsMenu $= Alternar menú amigo
Static jkm_PhotoCameraToggle $= Alternar modo camara

Static jkm_N_OrderRequestDock $= Llamar al caza
Static jkm_N_OrderDefensiveBehaviour $= Modo defensivo
Static jkm_N_OrderAggressiveBehaviour $= Modo agresivo
Static jkm_N_OrderFocusTarget $= Atacar al objetivo seleccionado
Static jkm_N_OrderHoldFire $= Alto el fuego
Static jkm_N_OrderHoldPosition $= Mantén la posición
Static jkm_N_OrderFollow $= Sigueme
Static jkm_N_OpenOrders $= Abrir ordenes

Static jkm_UI $= UI_Select,UI_Up,UI_Down,UI_Left,UI_Right,CyclePreviousPanel,CycleNextPanel

Static jkmSpeechCulture = es-ES

END PROGRAM

//*************************************************************
// SetUpLanguage
//*************************************************************
PROGRAM SetUpLanguage

Rem do these.. If %(CurrentCulture) Contains sv
Call SetUpLanguageSpanish

END PROGRAM

//*************************************************************
// onStartup
// Events: onStartup
//*************************************************************
PROGRAM onStartup

Print Paquete JKM instalado, ejecuntadose en la Versión %version(1).%version(2).%version(3).%version(4) de EDD

Call SetUpLanguage
Call Initialise

END PROGRAM

//*************************************************************
// onPostStartup
// Events: onPostStartup
//*************************************************************
PROGRAM onPostStartup

MenuItem VoiceMenuConfigureVoice                                // see of voice menu installed..
If MenuPresent IsFalse
    MenuItem jkmMenuVoice,add-ons,"Configuración síntesis de Voz",speaker

MenuItem jkmMenuJoystick,add-ons,"Lista Joystick e Información de enlaces",speaker

END PROGRAM

//*************************************************************
// onInstall
// Events: onInstall
//*************************************************************
PROGRAM onInstall

If InstallList Contains JKMV
    Call SetUpLanguage
    Call Initialise
    Say %(jkm_install)
    MenuItem jkmMenuVoice,add-ons,"Configuración de síntesis de voz",speaker
    MessageBox "Debido a la incapacidad de determinar con precisión el modo UI de Elite (Normal, Mapa Galaxia, menú del sistema, etc.),\r\nes necesario deshabilitar la voz para los enlaces que se asignan a las mismas teclas de la interfaz de usuario. \ r \ n \ r \ nTambién puede escuchar indicaciones vocales si asigna las teclas utilizadas en los mapas de galaxias o planetarios, Holo-Me \r\nen las teclas utilizadas en el modo normal que están vocalizadas. \ r \ n \ r \ nTodas las indicaciones de voz se desactivan cuando están acopladas.", "Aviso IU Teclas", OK, Warning

END PROGRAM

//*************************************************************
// Initialise
//*************************************************************
PROGRAM Initialise

Perform EnableEliteInputNoAxis
Static jkm_lastbinding = None
Static jkm_lastbindingtime = 0
Static jkm_speaking = 0

Perform listeliteinput
Print %(EliteInputCheck)

END PROGRAM

//*************************************************************
// Menus
// Events: onMenuItem?(MenuName Contains jkmMenu)
//*************************************************************
PROGRAM Menus

If MenuName Contains jkmMenuVoice
    Perform ConfigureVoice "Configuración de síntesis de voz"
If MenuName Contains jkmMenuJoystick
    EliteBindings *
    Perform listeliteinput
    InfoBox "Verificar:\r\n%(EliteInputCheck)\r\nEnlaces:\r\n%(EB_Text)\r\nDispositivos:\r\n%(EliteInput)", "Elite Información de enlaces y Joystick"

END PROGRAM

//*************************************************************
// TurnOn
// Events: onEliteInput
//*************************************************************
PROGRAM TurnOn

// Print
// Print %(Device), %(Binding), List: %(BindingList), EventName:%(EventName) Pressed:%(Pressed) Value:%(Value)

// Debug this. Use Event THPOS and move the cursor to check various points.
Event Last

If EC_DockedState IsPresent And EC_DockedState IsTrue           // Docked, don't do anything
    End 

If Binding IsOneOf %(jkm_powerbindings)                         // if power binding, alter to generic name
    Set Binding = Power

Set v = jkm_%(Binding)                                          // make up variable name from event name

If %(v) NotPresent And EC_Hyperspace IsPresent                  // if not present, and we have a hyperspace flag (just in case)
    If EC_Hyperspace IsFalse                                    // select alternate name of hyperspace flag
        Set v = jkm_N_%(Binding)
    Else 
        Set v = jkm_H_%(Binding)

If %(v) IsPresent And %(v) IsNotEmpty                           // we have a binding
    If BindingList AnyOfAny %(jkm_UI)
        // Print Key is a UI key - can't tell what mode we are in. ignoring
    Else If Binding $!= %(jkm_lastbinding) Or "%eval(\"%TickCount()-%(jkm_lastbindingtime)\")" > 2000
        Set speech = "%phrase(\"%indirect(v)\")"                // now expand any phrases in it
        Call speak(speech="%(speech)",Priority="Low")
        // print Say %(speech)  %TickCount() %(jkm_lastbindingtime)
        Static jkm_lastbinding = %(Binding)
        Static jkm_lastbindingtime = %TickCount()
    Else 
        Static jkm_lastbindingtime = %TickCount()
        // Print rejected due to duplicate binding in less than X second %TickCount() %(jkm_lastbindingtime)

END PROGRAM

//*************************************************************
// speak
//*************************************************************
PROGRAM speak

Rem speech always, optional: Volume, Priority, FinishEvent, Wait

Set speech = "%replacevar(speech,\"jkm_tx\")"

Set ds = 0
If SpeechOptions IsPresent And SpeechOptions Contains PrintOnly;
    Set ds = 1

// Real time, don't bother if its more than 3s of queued speech

Say %(speech), QueueLimit=3000, Literal=1, Volume="%existsdefault(Volume,\"-999\")", Priority="%existsdefault(Priority,\"Normal\")", DontSpeak="%(ds)", FinishEvent="JKMFinish" , Wait="%existsdefault(Wait,\"0\")"
Static jkm_speaking = 1

// Print Say %(speech)

If SpeechLog IsPresent And SpeechLog IsNotEmpty
    If SpeechOptions IsPresent And SpeechOptions Contains LogLastOnly;
        Let success = %openfile(h1,SpeechLog,create)
    Else 
        Let success = %openfile(h1,SpeechLog,append)

    If success IsTrue
        If SpeechOptions IsPresent And SpeechOptions Contains LogTimeDate;
            Expr %write(h1,"%datetimenow(tolocal):")

        Expr %writeline(h1,speech)
        Expr %closefile(h1)
    Else 
        Print Cannot write to speech log file '%(SpeechLog)'

END PROGRAM

//*************************************************************
// FinishSpeech
// Events: onSayFinished?(EventName $== JKMFinish)
//*************************************************************
PROGRAM FinishSpeech

// Holding this for later work
Static jkm_speaking = 0

END PROGRAM

