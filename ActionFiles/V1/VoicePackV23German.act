ACTIONFILE V4

ENABLED True

INSTALL LongDescription="This is the version 23 of the German voice pack for EDD, for version 18.1+\r\n***This will disable all previous voice packs***\r\n\r\nIt vocalises most events which are received, and welcomes you at the start and exit of the program. \nCertain events are not vocalised if they don't contain any information relevant to the user or if they only appear on start up.\r\n\r\nSpeech control and voice selection can be accomplished through the menu option in Add-Ons.\r\n\r\nThe ED Discovery team hope you enjoy this feature.\r\n\r\nMore voices can be purchased online.  Ivona voices which are commonly used since they are compatible with SAPI 5 interface can be purchased from www.textaloud.com individually.  Voices must be SAPI 5 compatible to be used with EDDiscovery.\r\nNPC background sounds (C) Frontier Developments"
INSTALL ShortDescription="Voice file for ED"
INSTALL Version=23.0.0.0
INSTALL MinEDVersion=18.1.0.0
INSTALL Location=Actions
INSTALL DisableOther1=VoicePackV1
INSTALL DisableOther2=VoicePackV2
INSTALL DisableOther3=VoicePackV3
INSTALL DisableOther4=VoicePackV4
INSTALL DisableOther5=VoicePackV5
INSTALL DisableOther6=VoicePackV6
INSTALL DisableOther7=VoicePackV8
INSTALL DisableOther8=VoicePackV9
INSTALL DisableOther9=VoicePackV10
INSTALL DisableOther10=VoicePackV11
INSTALL DisableOther11=VoicePackV12
INSTALL DisableOther12=VoicePackV14
INSTALL DisableOther13=VoicePackV15
INSTALL DisableOther14=VoicePackV16
INSTALL DisableOther15=VoicePackV17
INSTALL DisableOther16=VoicePackV18
INSTALL DisableOther17=VoicePackV19
INSTALL DisableOther18=VoicePackV20
INSTALL DisableOther19=VoicePackV21
INSTALL DisableOther20=VoicePackV22
INSTALL OtherFile1=npcmix.mp3;Sounds
INSTALL OtherFile2=npcprefix.mp3;Sounds
INSTALL OtherFile3=npcpostfix.mp3;Sounds


GROUP Combat

EVENT Bounty, GenericResponse, "", Condition AlwaysTrue
EVENT BuyAmmo, GenericResponse, "", Condition AlwaysTrue
EVENT CapShipBond, GenericResponse, "", Condition AlwaysTrue
EVENT CockpitBreached, GenericResponse, Volume=100, Condition AlwaysTrue
EVENT CommitCrime, CommitCrime, "", Condition AlwaysTrue
EVENT DockFighter, GenericResponse, "", Condition AlwaysTrue
EVENT EscapeInterdiction, GenericResponse, "", Condition AlwaysTrue
EVENT FactionKillBond, GenericResponse, "", Condition AlwaysTrue
EVENT FighterDestroyed, GenericResponse, "", Condition AlwaysTrue
EVENT FighterRebuilt, GenericResponse, "", Condition AlwaysTrue
EVENT Interdicted, GenericResponse, "", Condition AlwaysTrue
EVENT Interdiction, Interdiction, "", Condition AlwaysTrue
EVENT LaunchFighter, GenericResponse, "", Condition AlwaysTrue
EVENT PayFines, GenericResponse, "", Condition AlwaysTrue
EVENT PayBounties, GenericResponse, "", Condition AlwaysTrue
EVENT PayLegacyFines, GenericResponse, "", Condition AlwaysTrue
EVENT PVPKill, GenericResponse, "", Condition AlwaysTrue
EVENT RedeemVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT Scanned, GenericResponse, "", Condition AlwaysTrue
EVENT ShipTargeted, ShipTargeted, "", Condition AlwaysTrue

GROUP CommunityGoals

EVENT CollectCargo, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoal, CommunityGoal, "", Condition AlwaysTrue
EVENT CommunityGoalDiscard, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoalJoin, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoalReward, GenericResponse, "", Condition AlwaysTrue

GROUP Crew

EVENT ChangeCrewRole, GenericResponse, "", Condition AlwaysTrue
EVENT CrewAssign, GenericResponse, "", Condition AlwaysTrue
EVENT CrewFire, GenericResponse, "", Condition AlwaysTrue
EVENT CrewHire, GenericResponse, "", Condition AlwaysTrue
EVENT CrewLaunchFighter, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberJoins, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberRoleChange, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberQuits, GenericResponse, "", Condition AlwaysTrue
EVENT EndCrewSession, GenericResponse, "", Condition AlwaysTrue
EVENT JoinACrew, GenericResponse, "", Condition AlwaysTrue
EVENT KickCrewMember, GenericResponse, "", Condition AlwaysTrue
EVENT NpcCrewPaidWage, GenericResponse, "", Condition AlwaysTrue
EVENT NpcCrewRank, GenericResponse, "", Condition AlwaysTrue
EVENT QuitACrew, GenericResponse, "", Condition AlwaysTrue

GROUP Engineering/Synthesis

EVENT EngineerApply, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerCraft, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerContribution, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerProgress, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerLegacyConvert, GenericResponse, "", Condition AlwaysTrue
EVENT Synthesis, GenericResponse, "", Condition AlwaysTrue
EVENT TechnologyBroker, GenericResponse, "", Condition AlwaysTrue

GROUP Exploration

EVENT BuyExplorationData, GenericResponse, "", Condition AlwaysTrue
EVENT CodexEntry, GenericResponse, "", Condition AlwaysTrue
EVENT DiscoveryScan, GenericResponse, "", Condition AlwaysTrue
EVENT FSSAllBodiesFound, FSSAllBodiesFound, "", Condition AlwaysTrue
EVENT FSSDiscoveryScan, GenericResponse, "", Condition AlwaysTrue
EVENT FSSSignalDiscovered, FSSSignalDiscovered, QueueLimit=4000, Condition AlwaysTrue
EVENT NavBeaconScan, NavBeaconScan, "", Condition AlwaysTrue
EVENT MultiSellExplorationData, MultiSellExplorationData, "", Condition AlwaysTrue
EVENT Scan, Scan, "", Condition AlwaysTrue
EVENT SAAScanComplete, GenericResponse, "", Condition AlwaysTrue
EVENT SAASignalsFound, GenericResponse, "", Condition AlwaysTrue
EVENT SellExplorationData, SellExplorationData, "", Condition AlwaysTrue

GROUP Flight

EVENT ApproachBody, ApproachBody, QueueLimit=20000, Condition AlwaysTrue
EVENT ApproachSettlement, GenericResponse, QueueLimit=20000, Condition AlwaysTrue
EVENT Docked, GenericResponse, "", Condition AlwaysTrue
EVENT DockingCancelled, DockingCancelled, "", Condition AlwaysTrue
EVENT DockingDenied, GenericResponse, "", Condition AlwaysTrue
EVENT DockingGranted, GenericDelayedResponse, "Delay=15,DelayName=VoicePackDockingGrantedDelay", Condition AlwaysTrue
EVENT onTimer, DockingGrantedResponse, "", TimerName Contains VoicePackDockingGrantedDelay
EVENT DockingRequested, GenericResponse, "", Condition AlwaysTrue
EVENT DockingTimeout, GenericResponse, "", Condition AlwaysTrue
EVENT DockSRV, GenericResponse, "", Condition AlwaysTrue
EVENT FSDJump, FSDResponse, QueueLimit=5000, Condition AlwaysTrue
EVENT FuelScoop, GenericResponse, QueueLimit=3000, Condition AlwaysTrue
EVENT JetConeBoost, GenericResponse, "", Condition AlwaysTrue
EVENT JetConeDamage, GenericResponse, "", Condition AlwaysTrue
EVENT LeaveBody, GenericResponse, QueueLimit=5000, Condition AlwaysTrue
EVENT LaunchSRV, GenericResponse, "", Condition AlwaysTrue
EVENT Liftoff, GenericResponse, "", Condition AlwaysTrue
EVENT StartJump, GenericResponse, Priority=HighClear, Condition AlwaysTrue
EVENT SupercruiseEntry, GenericResponse, "", Condition AlwaysTrue
EVENT SupercruiseExit, SupercruiseExit, "", Condition AlwaysTrue
EVENT Touchdown, GenericResponse, "", Condition AlwaysTrue
EVENT Undocked, GenericResponse, "", Condition AlwaysTrue
EVENT USSDrop, GenericResponse, "", Condition AlwaysTrue

GROUP Missions

EVENT MissionAbandoned, GenericResponse, "", Condition AlwaysTrue
EVENT MissionAccepted, GenericResponse, "", Condition AlwaysTrue
EVENT MissionCompleted, GenericResponse, "", Condition AlwaysTrue
EVENT MissionFailed, GenericResponse, "", Condition AlwaysTrue
EVENT MissionRedirected, GenericResponse, "", Condition AlwaysTrue

GROUP Mining

EVENT AsteroidCracked, GenericResponse, "", Condition AlwaysTrue
EVENT MiningRefined, GenericResponse, "", Condition AlwaysTrue

GROUP Materials

EVENT MaterialCollected, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialDiscarded, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialDiscovered, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialTrade, GenericResponse, "", Condition AlwaysTrue

GROUP Misc

EVENT ClearSavedGame, GenericResponse, "", Condition AlwaysTrue
EVENT Died, GenericResponse, "", Condition AlwaysTrue
EVENT DatalinkScan, GenericResponse, "", Condition AlwaysTrue
EVENT DatalinkVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT DataScanned, GenericResponse, "", Condition AlwaysTrue
EVENT Friends, Friends, "", Condition AlwaysTrue
EVENT Promotion, GenericResponse, "", Condition AlwaysTrue
EVENT ReceiveText, ReceiveText, "", Condition AlwaysTrue
EVENT Resurrect, GenericResponse, "", Condition AlwaysTrue
EVENT ScientificResearch, GenericResponse, "", Condition AlwaysTrue
EVENT Screenshot, GenericResponse, "", Condition AlwaysTrue
EVENT SearchAndRescue, GenericResponse, "", Condition AlwaysTrue
EVENT SendText, GenericResponse, "", Condition AlwaysTrue

GROUP Powerplay

EVENT PowerplayCollect, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayDefect, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayDeliver, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayFastTrack, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayJoin, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayLeave, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplaySalary, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayVote, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayVoucher, GenericResponse, "", Condition AlwaysTrue

GROUP Ship/SRV

EVENT AfmuRepairs, GenericResponse, "", Condition AlwaysTrue
EVENT BuyDrones, GenericResponse, "", Condition AlwaysTrue
EVENT FetchRemoteModule, GenericResponse, "", Condition AlwaysTrue
EVENT HeatDamage, GenericResponse, "", Condition AlwaysTrue
EVENT HeatWarning, GenericResponse, "", Condition AlwaysTrue
EVENT HullDamage, HullDamage, "", Condition AlwaysTrue
EVENT LaunchDrone, GenericResponse, "", Condition AlwaysTrue
EVENT MassModuleStore, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleBuy, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleRetrieve, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSell, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSellRemote, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleStore, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSwap, GenericResponse, "", Condition AlwaysTrue
EVENT SellShipOnRebuy, GenericResponse, "", Condition AlwaysTrue
EVENT SellDrones, GenericResponse, "", Condition AlwaysTrue
EVENT SetUserShipName, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardBuy, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardNew, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardSell, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardSwap, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardTransfer, GenericResponse, "", Condition AlwaysTrue
EVENT SRVDestroyed, GenericResponse, "", Condition AlwaysTrue
EVENT RebootRepair, GenericResponse, "", Condition AlwaysTrue
EVENT RefuelAll, GenericResponse, "", Condition AlwaysTrue
EVENT RefuelPartial, GenericResponse, "", Condition AlwaysTrue
EVENT Repair, GenericResponse, "", Condition AlwaysTrue
EVENT RepairDrone, GenericResponse, "", Condition AlwaysTrue
EVENT RepairAll, GenericResponse, "", Condition AlwaysTrue
EVENT RestockVehicle, GenericResponse, "", Condition AlwaysTrue
EVENT SelfDestruct, GenericResponse, "", Condition AlwaysTrue
EVENT SystemsShutdown, GenericResponse, "", Condition AlwaysTrue
EVENT VehicleSwitch, GenericResponse, "", Condition AlwaysTrue

GROUP Squadron

EVENT AppliedToSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT DisbandedSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT InvitedToSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT JoinedSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT KickedFromSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT LeftSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT SharedBookmarkToSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT SquadronCreated, GenericResponse, "", Condition AlwaysTrue
EVENT SquadronDemotion, GenericResponse, "", Condition AlwaysTrue
EVENT SquadronPromotion, GenericResponse, "", Condition AlwaysTrue
EVENT WonATrophyForSquadron, GenericResponse, "", Condition AlwaysTrue

GROUP Trading

EVENT BuyTradeData, GenericResponse, "", Condition AlwaysTrue
EVENT CargoDepot, GenericResponse, "", Condition AlwaysTrue
EVENT EjectCargo, GenericResponse, "", Condition AlwaysTrue
EVENT MarketBuy, GenericResponse, "", Condition AlwaysTrue
EVENT MarketSell, MarketSell, "", Condition AlwaysTrue

GROUP Wings

EVENT WingAdd, GenericResponse, "", Condition AlwaysTrue
EVENT WingJoin, GenericResponse, "", Condition AlwaysTrue
EVENT WingLeave, GenericResponse, "", Condition AlwaysTrue
EVENT WingInvite, GenericResponse, "", Condition AlwaysTrue

GROUP Odyssey

EVENT BookDropship, GenericDelayedResponse, Delay=5000, Condition AlwaysTrue
EVENT BookTaxi, GenericDelayedResponse, Delay=5000, Condition AlwaysTrue
EVENT BuyMicroResources, GenericDelayedResponse, Delay=100, Condition AlwaysTrue
EVENT BuySuit, GenericDelayedResponse, Delay=100, Condition AlwaysTrue
EVENT BuyWeapon, GenericResponse, "", Condition AlwaysTrue
EVENT CancelDropship, GenericDelayedResponse, Delay=5000, Condition AlwaysTrue
EVENT CancelTaxi, GenericDelayedResponse, Delay=5000, Condition AlwaysTrue
EVENT CollectItems, GenericResponse, "", Condition AlwaysTrue
EVENT CreateSuitLoadout, GenericResponse, "", Condition AlwaysTrue
EVENT DeleteSuitLoadout, GenericResponse, "", Condition AlwaysTrue
EVENT Disembark, GenericResponse, "", Condition AlwaysTrue
EVENT DropItems, GenericResponse, "", Condition AlwaysTrue
EVENT DropShipDeploy, GenericResponse, "", Condition AlwaysTrue
EVENT Embark, GenericResponse, "", Condition AlwaysTrue
EVENT LoadoutEquipModule, GenericResponse, "", Condition AlwaysTrue
EVENT LoadoutRemoveModule, GenericResponse, "", Condition AlwaysTrue
EVENT RenameSuitLoadout, GenericResponse, "", Condition AlwaysTrue
EVENT ScanOrganic, GenericResponse, "", Condition AlwaysTrue
EVENT SellOrganicData, GenericResponse, "", Condition AlwaysTrue
EVENT SellSuit, GenericResponse, "", Condition AlwaysTrue
EVENT SellWeapon, GenericResponse, "", Condition AlwaysTrue
EVENT SuitLoadout, GenericResponse, "", Condition AlwaysTrue
EVENT SwitchSuitLoadout, GenericResponse, "", Condition AlwaysTrue
EVENT UpgradeSuit, GenericResponse, "", Condition AlwaysTrue
EVENT UpgradeWeapon, GenericResponse, "", Condition AlwaysTrue
EVENT UseConsumable, GenericResponse, "", Condition AlwaysTrue

GROUP Initialise

EVENT onRefreshEnd, onRefreshEnd, "", Condition AlwaysTrue
EVENT onStartup, onStartup, "", Condition AlwaysTrue
EVENT onShutdown, onShutdown, "", Condition AlwaysTrue
EVENT onInstall, onInstall, "", Condition AlwaysTrue
EVENT onSayFinished, SaySystemInfo, "", EventName $== FSD
EVENT onKeyPress, SaySystemInfo, "", KeyPress $== Alt+F11
EVENT onTimer, SaySystemInfo, "", TimerName $== ScanDelay
EVENT onMenuItem, Menus, "", MenuName Contains VoiceMenu
EVENT onTimer, GenericResponse, "", TimerName Contains VoicePackGenericDelay
EVENT onKeyPress, SayPhoneme, "", KeyPress $== Alt+F12

GROUP UIEvents

EVENT UILights, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UIFireGroup, GenericResponseUI, QueueLimit=200, EventClass_EventRefresh IsFalse
EVENT UIShieldsUp, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UILandingGear, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UIHardpointsDeployed, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UIInWing, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UICargoScoopDeployed, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UISilentRunning, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UIScoopingFuel, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UISrvHandbrake, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UISrvTurret, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UISrvUnderShip, GenericResponseUI, "QueueLimit=2000,MaxRepeat=20000", EventClass_EventRefresh IsFalse
EVENT UIFsdMassLocked, GenericResponseUI, "QueueLimit=2000,MaxRepeat=20000", EventClass_EventRefresh IsFalse
EVENT UIFsdCharging, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UIFsdCooldown, GenericResponseUI, QueueLimit=2000, EventClass_EventRefresh IsFalse
EVENT UILowFuel, GenericResponseUI, "", EventClass_EventRefresh IsFalse
EVENT UIOverHeating, GenericResponseUI, QueueLimit=5000, EventClass_EventRefresh IsFalse
EVENT UIBeingInterdicted, GenericResponseUI, "", EventClass_EventRefresh IsFalse
EVENT UIShipTargeted, GenericResponseUI, "", EventClass_ShipTargeted_TargetLocked == 0 And EventClass_EventRefresh IsFalse
EVENT UIGlideMode, GenericResponseUI, "", EventClass_EventRefresh IsFalse And EventClass_GlideMode IsFalse
EVENT UISelectedWeapon, SelectedWeapon, "", EventClass_EventRefresh IsFalse
EVENT UIMusic, Music, "", EventClass_EventRefresh IsFalse

GROUP PanelEvents

EVENT onSurveyor, SurveyorPanel, "", Condition AlwaysTrue

GROUP Other

EVENT onEDSMSync, EDSMSync, "", Condition AlwaysTrue
EVENT onNonModalDialog, subtitleDialogControl, "", Dialog $== SDIAG

//*************************************************************
// SetUpLanguageGerman
// Events: None
//*************************************************************
PROGRAM SetUpLanguageGerman

// UI's GenericResposeUI only triggers when major mode (ShipType) does not change (EventClass_Refresh=0)

Static say_UILights $= "%ifnonzero(EventClass_Lights,\"Licht an, Kommandant<;>Schalte Licht an\",\"Licht aus, Kommandant<;>Schalte Licht aus\")"
Static say_UIFireGroup $= "Wechsle zu Feuergruppe %substring(\"-ABCDEFGHIJK\",%(EventClass_Group),1)<;>Feuergruppe %substring(\"-ABCDEFGHIJK\",%(EventClass_Group),1) ausgewählt"
Static say_UIShieldsUp $= "%iftrue(EventClass_ShieldState,\"Schilde wiederhergestellt<;>Schilde sind hoch<;>Schilde wieder an\",\"Alarm, Schild ausgefallen, Kommandant<;>Warnung, keine Schilde\")"
Static say_UILandingGear $= "%iftrue(EventClass_Gear,\"Fahrgestell runter<;>Fahrwerk runter<;>Fahrwerk ausfahren, Kommandant<;>Fahrwerk ausfahren\",\"Fahrgestell hoch<;>Fahrwerk hoch<;>Fahrwerk einfahren, Kommandant<;>Fahrwerk einfahren\")"
Static say_UIHardpointsDeployed $= "%iftrue(EventClass_Deployed,\"Waffen ausfahren<;>Waffenaufhängungen ausfahren<;>Waffen raus\",\"Waffen weg<;>Waffen einfahren<;>Waffenaufhängungen einfahren\")"
Static say_UIInWing $= "%iftrue(EventClass_Winged,\"Geschwader betreten, Kommandant\",\"Geschwader verlassen\")"
Static say_UICargoScoopDeployed $= "%iftrue(EventClass_Scoop,\"Frachtschaufel bereitgestellt<;>Frachtschaufel ausgefahren\",\"Frachtschaufel eingefahren<;> Frachtschaufel weg\")"
Static say_UISilentRunning $= "%iftrue(EventClass_SilentRunning,\"Schleichfahrt<;>Schleichfahrt eingeschaltet\",\"Lüftungsschlitze aktiviert<;>Schleichfahrt deaktiviert\")"
Static say_UIScoopingFuel $= "%iftrue(EventClass_Scooping,\"Treibstoff sammeln<;> Treibstoffschaufel aktiviert\",\"Treibstoff sammeln beendet<;>Beende Treibstoff sammeln\")"
Static say_UISrvHandbrake $= "%iftrue(EventClass_Handbrake,\"Handbremse an<;> Handbremse angezogen\",\"Handbremse aus<;>Handbremse gelöst\")"
Static say_UISrvTurret $= "%iftrue(EventClass_Turret,\"Wechsle zum Turm\",\"Wechsle zur Kabine\")"
Static say_UISrvUnderShip $= "%iftrue(EventClass_UnderShip,\"Unterm Schiff, Kommandant<;>Unterm Schiff, bereit zum Zurückholen\", \"Schiff verlassen<;> Abgesetzt\")"
Static say_UIFsdMassLocked $= "%iftrue(EventClass_MassLocked,\"In Massensperre<;> Massensperre<;> Massensperre, F S A nicht verfügbar\",\"Aus der Massenverriegelung<;>Massenverriegelung verlassen<;>Massenverriegelung verlassen, bereit für Supercruiseflug\")"

// can't yet do the fsd uncharge, that happens on entry to FSD .. need some code to tell it not to say it.. not sure of sequencing
Static say_UIFsdCharging $= "%iftrue(EventClass_Charging,\"F S A wird geladen<;>Aufladen des F S A<;>Aufladen des Haupttriebwerks\")"

Static say_UIFsdCooldown $= "%iftrue(EventClass_CoolDown,\"\",\"F S A -Abklingzeit beendet<;>Abklingzeit beendet<;>F S A bereit\")"
Static say_UILowFuel $= "%iftrue(EventClass_LowFuel,\"Warnung, Treibstoffmangel<;>Treibstoffmangel Warnung \",\"\")"
Static say_UIOverHeating $= "%iftrue(EventClass_OverHeating,\"Warnung, Überhitzung<;>Überhitzung, Kommandant\",\"Temperatur normal<;>Temperatur in Ordnung\")"
Static say_UIBeingInterdicted $= "%iftrue(EventClass_Interdicted,\"Warnung, F S A Unterbrechung im Gange<;>Warnung, F S A wird unterbrochen, Ausweichmanöver!\",\"\")"

Static say_UIShipTargeted $= Ziel weg<;> Ziel verloren

Static say_UIGlideMode $= Supercruise Segelflug komplett Kommandant
Static say_UISelectedWeapon $= {{{%(EventClass_SelectedWeapon_Localised) ausgewählt<;>%(EventClass_SelectedWeapon_Localised) bereit<;>Waffe %(EventClass_SelectedWeapon_Localised) ausgefahren}}} {{{Kommandant<;>}}}
Static say_UISelectedTool $= {{{%(EventClass_SelectedWeapon_Localised) ausgewählt<;>%(EventClass_SelectedWeapon_Localised) bereit<;>Werkzeug %(EventClass_SelectedWeapon_Localised) ausgefahren}}} {{{Kommandant<;>}}}
Static say_UISelectedUnarmed $= {{{Werkzeug eingefahren<;>Werkzeug verstaut}}}
Static say_UISelectedUnarmedFromWeapon $= {{{Waffen eingefahren<;>Waffen verstaut}}}

// Too vocal EVENT UIIsInDanger, GenericResponseUI, "", Condition AlwaysTrue
// Static say_UIIsInDanger $= '%iftrue(EventClass_Danger,"","Gefahr gebannt Kommandant<;>Situation normal, die Gefahr ist vorüber")'

Static say_welcome $= Voice Pack aktiviert
Static say_install $= Elite Dangerous Discovery Voice Pack, Deutsche Version ist installiert
Static say_shutdown $= Bye Bye Kommandant, bis zum nächsten Mal<;> Beende Elite Dangerous Discovery<;>Flieg sicher, Kommandant<;>Lebewohl, Kommandant<;>Sichere Reisen, Kommandant<;>Tüdelü, Kommandant
Static say_refresh $=  'Willkommen '
Static say_refresh $+= %ifequal(RK_Class_Combat,"Elite V","Elite Rang V ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Elite IV","Elite Rang IV ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Elite III","Elite Rang III ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Elite II","Elite Rang II ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Elite I","Elite Rang I ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Elite","Elite ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Deadly","Tödlicher ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Dangerous","Gefährlicher ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Master","Meisterlicher ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Expert","Fachmännischer ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Competent","Kompetenter ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Novice","Debütantischer ") 
Static say_refresh $+= %ifcontains(RK_Class_Combat,"Mostly","Zumeist Harmloser ") 
Static say_refresh $+= %ifequal(RK_Class_Combat,"Harmless","Harmloser ") 
Static say_refresh $+= 'Kommandant %(Commander), '
Static say_refresh $+= %ifzero(LAST_OnFoot,"%ifnonzero(LAST_IsSRV,\"Sie sitzen in einem \",\"Sie fliegen eine \") 
Static say_refresh $+= %ship(LAST_ShipType)") 
Static say_refresh $+= ' mit %hnum(LED_Credits,HNumList) Credits'

Static say_ApproachBody $= Erreiche Objekt %body(EventClass_Body,EventStarSystem,say_ss)<;>Objekt %body(EventClass_Body,EventStarSystem,say_ss) in Reichweite, Kommandant<;>Schiff erreicht Objekt %body(EventClass_Body,EventStarSystem,say_ss), Kommandant
Static say_ApproachBodyWarning $= Warnung Kommandant, Körper mit hoher Schwerkraft, %hnum(S_Body_gravityg,HNumList) Jesus, Körpername %body(EventClass_Body,EventStarSystem,say_ss), Mit Vorsicht vorgehen<;>Warnung! %body(EventClass_Body,EventStarSystem,say_ss) hat hohe Schwerkraft, %hnum(S_Body_gravityg,HNumList) Jesus, Mit Vorsicht vorgehen
Static say_ApproachSettlement $= Erreichen %replace(EventClass_Name,'+','')<;>Siedlung %replace(EventClass_Name,'+','') wird erreicht  
Static say_AfmuRepairs $= Modul %(EventClass_ModuleLocalised) zu %round(EventClass_Health,0,0) Prozent repariert
Static say_AppliedToSquadron $= Staffel %(EventClass_Name) beigetreten
Static say_AsteroidCracked $= Asteroid %(EventClass_Body) geknackt, Kommandant<;>Bumm!<;>%(EventClass_Body) geknackt, Kommandant

Static say_Bounty $= "Das Kopfgeld für dieses Schiff beträgt %hnum(EventClass_TotalReward,HNumList) Credits, Fraktion war %rs(\"%alt(EventClass_VictimFactionLocalised,EventClass_VictimFaction)\",say_ss)"
Static say_BuyAmmo $= Munition gekauft, %(EventClass_Cost) Credits<;>Das kostete %(EventClass_Cost) Credits
Static say_BuyExplorationData $= Karte des Sternensystems %star(EventClass_System,say_ss) gekauft für %(EventClass_Cost) Credits
Static say_BuyDrones $= Sie kauften %(EventClass_Count) %(EventClass_Type), zu einem Preis von %(EventClass_TotalCost) Credits
Static say_BuyTradeData $= Sie kauften Handelsdaten für das System %star(EventClass_System,say_ss), Kosten, %(EventClass_Cost) Credits

Static say_BuyMicroResources $= %ifgt(EventClass_Resource_Count,1,'%(EventClass_Resource_Count) Stück','') %(EventClass_Resource_Name_Localised) gekauft, Preis ist %(EventClass_Price) Credits
Static say_BuySuit $= %(EventClass_Name_Localised) für %hnum(EventClass_Price,HNumList) Credits gekauft
Static say_BuyWeapon $= %(EventClass_Name_Localised) für %hnum(EventClass_Price,HNumList) Credits gekauft
Static say_BookDropship $= Bestätigt Kommandant, Sie haben sich zum Militärdienst bei %star(EventClass_DestinationSystem,say_ss), %(EventClass_DestinationLocation) gemeldet 
Static say_BookTaxi $= Bestätigt Kommandant, Sie buchen ein Apex-Taxi nach %star(EventClass_DestinationSystem,say_ss), %(EventClass_DestinationLocation), Kosten %hnum(EventClass_Cost,HNumList) Credits

Static say_CancelTaxi $= Bestätigt Kommandant, Taxi wurde storniert, Erstattung %hnum(EventClass_Refund,HNumList) Credits
Static say_CancelDropship $= Bestätigt Kommandant, Landungsschiff storniert, zurücktreten.<;> Das war knapp, Kommandant, gut, dass Sie abgesagt haben!

Static say_CargoDepot $= "%ifequal(EventClass_UpdateEnum,\"Collect\",\"Sie haben %(EventClass_Count) von %(EventClass_FriendlyCargoType) eingesammelt, es bleiben \")"
Static say_CargoDepot $+= "%ifequal(EventClass_UpdateEnum,\"Deliver\",\"Sie haben %(EventClass_Count) von %(EventClass_FriendlyCargoType) geliefert, es bleiben \")"
Static say_CargoDepot $+= "%ifequal(EventClass_UpdateEnum,\"WingUpdate\",\"Aktualisierung der Frachtmission, \")"
Static say_CargoDepot $+= "%(EventClass_ItemsToGo) Stück übrig, %round(EventClass_ProgressPercent,1,\"0.#\") Prozent."

Static say_CapShipBond $= Belohnung für den Kampf mit GroßFighteren von der Fraktion %rs(EventClass_AwardingFaction,say_ss) gegen %rs(EventClass_VictimFaction,say_ss), %hnum(EventClass_Reward,HNumList) Credits
Static say_CockpitBreached $= Alarm, Alarm, Cockpit hat Risse. Fliegen sie schnellstmöglich zu einem Landeplatz<;>Notfall, Verlust des Cockpit Verdecks, Abbruch<;>Notfall, Cockpit Verdeck ist gebrochen
Static say_CollectCargo $= "%(EventClass_FriendlyType) {{{aufgenommen<;>gesammelt<;>aufgeschöpft}}} %iftrue(EventClass_Stolen,\", Warnung, Kommandant, diese Fracht ist gestohlen\")"
Static say_CommitCrimeFine $= Ordnungsstrafe verhängt, Kommandant, Vorwurf ist %(EventClass_CrimeType), %ifnotempty(EventClass_Victim,' Opfer ist %(EventClass_VictimLocalised), ')gegen Fraktion %rv(EventClass_Faction,say_ss), Betrag %hnum(EventClass_Fine,HNumList) Kredits
Static say_CommitCrimeBounty $= Verbrechen verübt, Kommandant, %(EventClass_CrimeType),%ifnotempty(EventClass_Victim,' Opfer ist %(EventClass_VictimLocalised), ')gegen Fraktion %rv(EventClass_Faction,say_ss), Kopfgeld ist %hnum(EventClass_Bounty,HNumList) Kredits
Static say_CommunityGoal $= Aktuelle Community-Ziele sind %(EventClass_CommunityGoalList)
Static say_CommunityGoalJoin $= Trete dem Community-Ziel %sc(EventClass_Name) bei, es befindet sich im %star(EventClass_System,say_ss) System
Static say_CommunityGoalReward $= Community-Ziel %sc(EventClass_Name), aus dem %star(EventClass_System,say_ss) System, belohnte dich mit %hnum(EventClass_Reward,HNumList) Credits
Static say_CommunityGoalDiscard $= Community-Ziel %sc(EventClass_Name) verlassen, es befand sich im System %star(EventClass_System,say_ss) 
Static say_CrewAssign $= "Mannschaftsmitglied %(EventClass_Name), %ifequal(EventClass_Role,\"Active\",\" meldet sich zum Dienst\",\" in der Rolle, %(EventClass_Role)\")"
Static say_CrewFire $= {{{Mannschaftsmitglied %(EventClass_Name) }}}gefeuert<;>entlassen<;>wird ausbezahlt, auf Wiedersehen Trottel
Static say_CrewHire $= "{{{Mannschaftsmitglied %(EventClass_Name) angeworben %ifnotempty(EventClass_Faction,\", Fraktion %rs(EventClass_Faction,say_ss)\"), Rang %(EventClass_CombatRank), Kosten, %(EventClass_Cost) Credits.}}} Willkommen im Team<;>Willkommen an Bord"

Static say_ChangeCrewRole $= Besatzungsrolle geändert in %(EventClass_Role)<;>Steuerung auf %(EventClass_Role) getauscht
Static say_CrewMemberJoins $= Mannschaftsmitglied %(EventClass_Crew) gesellt sich zu uns auf der %(EventShip_ShortName), Willkommen, Kommandant<;>Willkommen auf unserem Schiff Kommandant %(EventClass_Crew) 
Static say_CrewMemberQuits $= Mannschaftsmitglied %(EventClass_Crew) zieht die Reißleine<;>Kommandant %(EventClass_Crew) verlässt uns
Static say_CrewLaunchFighter $= %(EventClass_Crew) startete Jäger<;>Jäger los, Pilot %(EventClass_Crew)
Static say_CrewMemberRoleChange $= %(EventClass_Crew) änderte die Rolle zu %(EventClass_Role)
Static say_JoinACrew $= Verstärkt Kommandant %(EventClass_Captain) als Mannschaftsmitglied<;>Tritt mit Kommandant %(EventClass_Captain) zum Dienst an
Static say_QuitACrew $= Schiff von Kommandant %(EventClass_Captain) wird verlassen<;>Rücktritt von meinem Auftrag, Kommandant %(EventClass_Captain)
Static say_KickCrewMember $= Entlasse %(EventClass_Crew)<;>Kommandant %(EventClass_Crew) abgezogen<;>%(EventClass_Crew) wird vom Schiff entfernt

Static say_ClearSavedGame $= Wahnsinn! Das sind eine Menge weggeworferner Credits, Spielstand gelöscht!<;>Spiel gelöscht.
Static say_CodexEntry $= Kodexeintrag %(EventClass_Name_Localised) erzeugt

Static say_CollectItems $= %(EventClass_Resource_Name_Localised) {{{abgeholt<;>gesammelt<;>gegriffen}}}
Static say_CreateSuitLoadout $= {{{Bestätigt Kommandant, <;>}}}%(EventClass_SuitName_Localised) BeKonfiguration %rv(EventClass_LoadoutName,suit_loadoutrename) erstellt
Static say_DeleteSuitLoadout $= BeKonfiguration %(EventClass_SuitName_Localised) %rv(EventClass_LoadoutName,suit_loadoutrename) gelöscht {{{Kommandant<;>}}}

Static say_DropItems $= %(EventClass_Resource_Name_Localised) {{{fallengelassen<;>weggeworfen}}}

Static say_Disembark $= Ausgeschifft %iftrue(EventClass_Taxi,'von Apex Taxi','%iftrue(EventClass_SRV,"aus SRV","vom Schiff")') zu 
Static say_Disembark $+= %ifequal(EventCurrentMode,"OnFootPlanetaryPort"," Planetenhafen %(EventStationName)")
Static say_Disembark $+= %ifequal(EventCurrentMode,"OnFootStarPort"," Sternenhafen %(EventStationName)")
Static say_Disembark $+= %ifequal(EventCurrentMode,"OnFootPlanet"," Planet %body(EventClass_Body,EventStarSystem,say_ss)")
Static say_Disembark $+= %ifequal(EventCurrentMode,"OnFootFleetCarrier"," Flottenträger %(EventStationName)")    

Static say_DatalinkVoucher $= {{{Gescannte Datenverbindung<;> Heruntergeladene Datenverbindung}}}{{{, der erhaltene Gutschein hat einen Wert von<;>, der Wert ist}}} %hnum(EventClass_Reward,HNumList) Credits, erhalten von %rs(EventClass_PayeeFaction,say_ss)
Static say_DatalinkScan $= Gescannte Datenverbindung, %(EventClass_MessageLocalised)
Static say_DataScanned $= %sc(EventClass_Type) gescannt
Static say_DiscoveryScan $= "{{{Gescanntes System, %(EventClass_Bodies)<;>Systemscan zeigt %(EventClass_Bodies)}}}{{{ %ifeq(EventClass_Bodies,1,\"Objekt\",\"Objekte\") }}}{{{gefunden<;>erkannt}}}{{{ Kommandant<;>}}}"
Static say_Died $= Hier liegen die Gebeine von Kommandant %(Commander), tot und begraben<;> Sie sind tot und begraben, Kommandant %(Commander)<;>Ich sende Ihnen den Bestatter, Kommandant %(Commander)<;>Asche zu Asche, Staub zu Staub, zum Wohl Kommandant %(Commander)
Static say_Docked $= "{{{Angedockt an %(EventClass_StationName), %ifnotempty(EventClass_StationType,\"Typ %(EventClass_StationType) \")}}}{{{. }}}{{{Dies ist eine %(EventClass_Economy_Localised) basierte Station<;>Hafenökonomie ist %(EventClass_Economy_Localised)}}}"
Static say_DockSRV $= Oberflächenerkundungsfahrzeug ist zurück an Bord<;>An Bord des Mutterschiffs, Kommandant, Flugbetrieb vorbereiten<;>Mutterschiff betreten

Static dockingdeniedlist = Kein Platz<;>Zu groß<;>Feindlich<;>Verstöße<;>Entfernung<;>Aktiver Kämpfer<;>Kein Grund
Static dockingresponse = "Kein Platz, Kommandant<;>Ihr Schiff ist zu groß für die verfügbaren Plätze, Kommandant<;>Sie sind dieser Station feindlich gesinnt, Kommandant<;>Sie haben ungeklärte Verstöße, Kommandant<;>Sie sind zu weit von der Station entfernt, Kommandant<;>Sie haben einen Jäger im Einsatz, Kommandant<;>Andocken wird verweigert, Kommandant"
Static say_DockingDenied $= %(EventClass_StationName) hat das Andocken verweigert! %wordof(dockingresponse,%wordfind(dockingdeniedlist,EventClass_Reason))

Static say_DockingGranted $= "Kommandant, bestätigt für Landeplatz %(EventClass_LandingPad)<;>Bestätigt für Landeplatz %(EventClass_LandingPad)<;> Landeplatz %(EventClass_LandingPad) ist bereit für Sie Kommandant"
Static say_DockingComputer $= "Kommandant, automatisches Andocken ist im Gange"
Static say_DockingGrantedCO $= "Kommandant, Landeplatz %(EventClass_LandingPad) ist bei<;>Bestätigte Landung auf Platz %(EventClass_LandingPad), befindet sich bei<;> Landeplatz %(EventClass_LandingPad) ist bereit für Sie Kommandant, befindet sich bei"
Static say_DockingGranted1 $= ein Uhr
Static say_DockingGranted2 $= zwei Uhr
Static say_DockingGranted3 $= drei Uhr
Static say_DockingGranted4 $= vier Uhr
Static say_DockingGranted5 $= fünf Uhr
Static say_DockingGranted6 $= sechs Uhr
Static say_DockingGranted7 $= sieben Uhr
Static say_DockingGranted8 $= acht Uhr
Static say_DockingGranted9 $= neun Uhr
Static say_DockingGranted10 $= zehn Uhr
Static say_DockingGranted11 $= elf Uhr
Static say_DockingGranted12 $= zwölf Uhr
Static say_DockingGrantedD2 $= "an der Hafeneinfahrt;am Ende des Hafens"
Static say_DockingGrantedD4 $= "an der Hafeneinfahrt;nahe der Mitte;in mittlerer Entfernung;am Ende des Hafens"
Static say_DockingGrantedD5 $= "an der Hafeneinfahrt;nahe der Mitte;in der Mitte des Hafens;in mittlerer Entfernung;am Ende des Hafens"
Static say_DockingGrantedGRN $= " {{{, wenn die grüne Navigationsleuchte der Station Steuerbord ist.<;>, wenn die rote Navigationsleuchte der Station Backbord ist.}}} "

Static say_DockingRequested $= Landungs Anfrage gesendet an %(EventClass_StationName)<;>Andocken angefordert von %(EventClass_StationName)<;>%(EventClass_StationName), Andocken angefragt
Static say_DockingTimeout $= Zu spät Kommandant, die Erlaubnis zum Andocken wurde von %(EventClass_StationName) entzogen<;>Zu langsam Kommandant, Erlaubnis zum Andocken an %(EventClass_StationName) wurde zurückgezogen
Static say_DockingCancelled $= Andocken abgebrochen<;>Landungs Anfrage abgebrochen
Static say_DockFighter $= Kriegsschiff an Mutterschiff angedockt Kommandant<;>Kriegsschiff wieder an Bord<;>Das Kriegsschiff hat erfolgreich angedockt, Kommandant<;>Kriegsschiff gelandet

Static say_DisbandedSquadron $= Geschwader %(EventClass_Name) aufgelöst Kommandant

Static say_DropshipDeploy $= {{{Bereithalten Kommandant, Abwurf<;>Bereiten Sie sich darauf vor, Kommandant, dass Sie in wenigen Augenblicken abgeworfen werden}}}

Static say_Embark $= {{{Einstieg<;>Willkommen an Bord Kommandant, Einstieg}}} %iftrue(EventClass_Taxi,'in Apex Taxi','%iftrue(EventClass_SRV,"in SRV","in Schiff")')

Static say_edsmscannoinfo $= Keine weiteren Informationen zum System.<;>Der Schiffscomputer hat keine weiteren Informationen zu diesem System<;>Nachschlagen im Wiki Pedia ist fehlgeschlagen! Ich kann für dieses System nichts finden<;> Die Google-Suche für dieses System zeigt an, dass keine Informationen verfügbar sind<;>Systeminformationen nicht verfügbar
Static say_edsmscanstarsplanets $= "Aktuell sind %(totalstars) %ifne(totalstars,\"1\",\"Sterne\",\"Stern\") und %(totalplanets) %ifne(totalplanets,\"1\",\"Planeten\",\"Planet\") in diesem System bekannt"

Static say_edsmscanstarinfo $= "%(type) %star(starbodyname,say_ss), Art %(startype), Masse %roundnz(mass,1,0.#,4) Sonnen, %ifnonzero(planets,\" %(planets) Planeten\")"
Static say_edsmscanstarnoinfo $= "Keine Information über %(type) %star(ownname,say_ss), %ifnonzero(planets,\" %(planets) Planeten\"). "
Static say_edsmscanstarbarycentre $= "Schwerpunkt %star(ownname,say_ss), %ifnonzero(planets,\" %(planets) Planeten\"). "

Static say_edsmscanbodystarinfo $= "%star(pname,say_ss), %sc(stype), Masse %roundnz(mass,1,0.#,4) Sonnen. "
Static say_edsmscanbodyinfo $= "%body(pname,EventStarSystem,say_ss), %(terraform)%(class)%ifnotcontains(landable,\"Keine \",\", Landemöglichkeit\")"
Static say_edsmscanbodyinfoAtmos $= "%ifnotempty(atmos,\", %(atmos)\")%ifnotcontains(atmos,\"atmosphere\",\" Atmosphäre \",\"\",\"\")"
Static say_edsmscanbodyinfoVolcanism $= "%ifnotempty(volcanism, \", %(volcanism)\")"
Static say_edsmscanbodyinfoMat $= ", Materialien erkannt "
Static say_edsmscanbodynoinfo $= Keine Information über %(ownname).

Static say_EndCrewSession $= "{{{Crew Session beendet<;>Crew-Sitzung beenden}}}{{{ Kommandant<;>}}}{{{%ifnonzero(EventClass_OnCrime,\", ein Verbrechen wurde begangen\")}}}"

Static say_EjectCargo $= "%iftrue(EventClass_Abandoned,\"Werfe\",\"Stoße\") %(EventClass_Count) Einheiten %(EventClass_FriendlyType) über Bord<;>%(EventClass_FriendlyType) ausgeworfen<;> %(EventClass_FriendlyType) abgeladen"

Static say_FetchRemoteModule $= Modul %sc(EventClass_StoredItemLocalised) wird abgerufen, Kosten %hnum(EventClass_TransferCost,HNumList) Credits
Static say_FactionKillBond $= Belohnung für den Kampf der Fraktion %rs(EventClass_AwardingFaction,say_ss) gegen %rs(EventClass_VictimFaction,say_ss), %hnum(EventClass_Reward,HNumList) Credits

Static say_Friends $= "%ifEqual(EventClass_Status,\"Offline\",\"Freund \")%ifEqual(EventClass_Status,\"Online\",\"Freund \")%(EventClass_Name) %ReplaceVar(EventClass_Status,say_friendsub)"
Static say_friendsub1 $= hinzugefügt<;>wurde als Freund hinzugefügt
Static say_friendsub2 $= ersucht<;>Fragt an, als Freund hinzugefügt zu werden
Static say_friendsub3 $= online<;>ist online
Static say_friendsub4 $= offline<;>ist offline
Static say_friendsub5 $= abgelehnt<;>hat deine Freundschaft abgelehnt

Static say_FighterRebuilt $= Fighter einsatzbereit<;>Neues Fighter fertig Kommandant<;>Starten Sie das Fighter, wenn Sie bereit sind<;>
Static say_FighterDestroyed $= Alarm, Kommandant Fighter wurde zerstört<;>Fighter wurde zerstört<;>Fighter zerstört

// not used Static say_FSDTarget $= Targetted system %star(EventClass_StarSystem,say_ss)<;>%star(EventClass_StarSystem,say_ss) Selected<;> %star(EventClass_StarSystem,say_ss) locked in
Static say_FSSAllBodiesFound $= Alle Körper gefunden<;>Glückwunsch, Alle Körper gefunden<;> System gescannt<;> Scan koplett, Kommandant
Static say_FSSDiscoveryScan $+= "%ifEQ(EventClass_Progress,100,\" %(EventClass_BodyCount) Körper gescannt, Fortschritt beträgt 100 Prozent<;> %(EventClass_BodyCount) Körper gescannt, Scan komplett \",\" Fortschritt %round(EventClass_Progress,0,0) Prozent, %(EventClass_BodyCount) Körper gescannt. Weitere Scans nötig!<;>Weitere Scans nötig! Fortschritt beträgt aktuell %round(EventClass_Progress,0,0) Prozent. \")"

Static say_FSSSignalDiscovered1 $= {{{Erkannt <;>Entdeckt <;>Gefunden }}} 
Static say_FSSSignalDiscovered1 $+= %ifequal(EventClass_Signals[1]_ClassOfSignal,'Carrier','Träger, ')
Static say_FSSSignalDiscovered1 $+= %ifequal(EventClass_Signals[1]_ClassOfSignal,'Station','Station, ')
Static say_FSSSignalDiscovered1 $+= %ifequal(EventClass_Signals[1]_ClassOfSignal,'Installation','Installation, ')
Static say_FSSSignalDiscovered1 $+= %ifequal(EventClass_Signals[1]_ClassOfSignal,'Megaship','Mega Schiff, ')
Static say_FSSSignalDiscovered1 $+= %ifequal(EventClass_Signals[1]_ClassOfSignal,'Titan','Titan, ')
Static say_FSSSignalDiscovered1 $+= %ifcontains(EventClass_Signals[1]_ClassOfSignal,'USS','%(EventClass_Signals[1]_USSTypeLocalised)','%(EventClass_Signals[1]_SignalName_Localised)')
Static say_FSSSignalDiscovered1 $+= %ifnotempty(EventClass_Signals[1]_ThreatLevel, ', Bedrohungsstufe %(EventClass_Signals[1]_ThreatLevel)') %ifnotempty(EventClass_Signals[1]_SpawningFaction_Localised, ', der Fraktion %rv(EventClass_Signals[1]_SpawningFaction_Localised,say_ss)')
Static say_FSSSignalDiscoveredN $= %(EventClass_SignalsCount) Signale gefunden

Static say_EngineerProgressRank $= Glückwunsch, Sie haben den Rang %(EventClass_Engineers[1]_Rank) bei Ingenieur %(EventClass_Engineers[1]_Engineer) erreicht.
Static say_EngineerProgressState $= Ingenieur %(EventClass_Engineers[1]_Engineer) hat Ihren Status auf %(EventClass_Engineers[1]_Progress) gesetzt.
Static say_EngineerProgress $= %ifeq(EventClass_EngineersCount,1,'%ifnotempty(EventClass_Engineers[1]_Progress,say_EngineerProgressState,say_EngineerProgressRank)')

Static say_IngenieurContribution $= "%ifequal(EventClass_Type,\"Credits\", \"Beitrag %(EventClass_Quantity) Credits \")"
Static say_IngenieurContribution $+= "%ifequal(EventClass_Type,\"Material\", \"Beitrag %(EventClass_Quantity) %(EventClass_Material_Localised) \")"
Static say_IngenieurContribution $+= "%ifequal(EventClass_Type,\"Waren\", \"Beitrag %(EventClass_Quantity) %(EventClass_Commodity_Localised) \")"
Static say_IngenieurContribution $+= an Ingenieur %(EventClass_Ingenieur)

Static say_EngineerLegacyConvert $= Umgewandeltes Älteres Technisches Modul, Blaupause %sc(EventClass_Engineering_FriendlyBlueprintName), von Ingenieur %(EventClass_Engineering_Engineer).  Es hat einen Level %(EventClass_Engineering_Level) Effekt

Static say_EngineerApply $= Blaupause %sc(EventClass_Blueprint), von Ingenieur %(EventClass_Engineer),  auf Schiff angewendet.  Es handelt sich um einen Level %(EventClass_Level) Effekt
Static say_EngineerCraft $= "Blaupause %sc(EventClass_Engineering_FriendlyBlueprintName), von Ingenieur %(EventClass_Engineer) %(EventClass_Engineering_Engineer).  Effekt hat Level  %(EventClass_Engineering_Level). Bereit zur Anwendung "

Static say_EscapeInterdiction $= Umgehung des Verbots durch %iftrue(EventClass_IsPlayer,say_EscapeInterdictionPlayer)%iffalse(EventClass_IsPlayer,say_EscapeInterdictionNPC)
Static say_EscapeInterdictionPlayer $= Kommandant %(EventClass_Interdictor_Localised)
Static say_EscapeInterdictionNPC $= N P C %(EventClass_Interdictor_Localised)

Static say_FuelScoop $= "%ifgt(EventClass_Scooped,0.1,'{{{%round(EventClass_Scooped,1,0.#) Tonnen }}}{{{getankt<;>gesammelt}}}, %ifeq(EventShip_FuelCapacity,EventClass_Total,\"Tank voll\",\"%round(EventClass_Total,1,0.#) von %round(EventShip_FuelCapacity,1,0.#) Tonnen im Tank.\")')"

Static say_FSDJump $= "Angekommen bei %star(EventClass_StarSystem,say_ss), Sprungdistanz %round(EventClass_JumpDist,1,0.#) Lichtjahre"
Static say_FSDJumpVisit $= Erster Besuch, <;> Zweiter Besuch, <;> Dritter Besuch, <;> Vierter Besuch, <;> Fünfter Besuch, <;> Sechster Besuch, <;>
Static say_FSDJumpFuel $= , %round(EventClass_FuelUsed,1,0.#) Tonnen Treibstoff verbraucht
Static say_FSDJumpFaction $= ", System kontrolliert von %rs(EventClass_Faction,say_ss) %ifnotequal(EventClass_FactionState,\"None\",\"im Zustand %(EventClass_FactionState_Localised)\")"    // EventClass_FactionState when none !?
Static say_FSDJumpFuelWarning $= , Alarm Kommandant, Treibstoffstand ist niedrig<;>, Treibstoffstand ist niedrig<;>, Warnung, hier geht das Benzin zur Neige

Static say_HullDamageCritical $= Alarm, Alarm, Beschädigung kritisch bei %(health) %
Static say_HullDamage $= {{{Warnung Kommandant, <;>Kommandant, Alarm, }}} Schäden am Schiffskörper, sind bei %(health) %
Static say_HeatWarning $= Warnung Kommandant, steigende Temperatur<;>Es ist heiß hier drinnen! pass! auf!<;>Wir überhitzen Kommandant
Static say_HeatDamage $= Warnung Kommandant, Schäden durch Hitzeeinwirkung<;>Hitzeschäden erlitten<;>Schiff durch Überhitzung beschädigt

Static say_InterdictionSuccess $= %iftrue(EventClass_IsPlayer,say_InterdictionSuccessPlayer) %iffalse(EventClass_IsPlayer,say_InterdictionSuccessNPC)
Static say_InterdictionSuccessPlayer $= F S A von Spieler %(EventClass_CombatRank) Kommandant %(EventClass_Interdicted_Localised) unterbrochen.
Static say_InterdictionSuccessNPC $= F S A von N P C %(EventClass_Interdicted_Localised) %ifnotempty(EventClass_Faction,say_InterdictedFaction) unterbrochen.
Static say_InterdictionFailure $= %iftrue(EventClass_IsPlayer,say_InterdictionFailurePlayer) %iffalse(EventClass_IsPlayer,say_InterdictionFailureNPC)
Static say_InterdictionFailurePlayer $= F S A Unterbrechung von Spieler %(EventClass_CombatRank) Kommandant %(EventClass_Interdicted_Localised) fehlgeschlagen.
Static say_InterdictionFailureNPC $= F S A Unterbrechung von N P C %(EventClass_Interdicted_Localised) %ifnotempty(EventClass_Faction,say_InterdictedFaction) fehlgeschlagen.

Static say_Interdicted $= %iftrue(EventClass_IsPlayer,say_InterdictedPlayer) %iffalse(EventClass_IsPlayer,say_InterdictedNPC)
Static say_InterdictedPlayer $= Menschlicher Kommandant Alarm!, %iftrue(EventClass_Submitted,say_InterdictedSubmitted) F S A wurde von %(EventClass_CombatRank) Kommandant %(EventClass_Interdictor) unterbrochen.
Static say_InterdictedNPC $= N P C Alarm!, %iftrue(EventClass_Submitted,say_InterdictedSubmitted) F S A wurde von %(EventClass_Interdictor) unterbrochen, %ifnotempty(EventClass_Faction,say_InterdictedFaction)
Static say_InterdictedFaction $= von Fraktion %rs(EventClass_Faction,say_ss)
Static say_InterdictedSubmitted $= Ausgelöst bei

Static say_InvitedToSquadron $= Eingeladen zur Staffel %(EventClass_Name)<;>Geschwader %(EventClass_Name) möchte, dass Sie sich ihnen anschließen Kommandant.

Static say_JoinedSquadron $= Staffel %(EventClass_Name) beigetreten, Glückwünsche<;>%(EventClass_Name) Geschwader beigetreten
Static say_JetConeBoost $= {{{F S A gesteigert um das<;>Antrieb verstärkt um das}}} <say-as interpret-as='cardinal'> %round(EventClass_BoostValue,2,0.##) </say-as> fache
Static say_JetConeDamage $= {{{Alarm Kommandant, Neutronenstern-Strahlungskegel hat Modul %(EventClass_ModuleLocalised) beschädigt, }}}Sofortiges Ausweichmanöver einleiten<;> Sofortiges Verlassen des Konus<;>Notfallflucht jetzt

Static say_KickedFromSquadron $= Geschwader %(EventClass_Name) hat Sie relegiert Kommandant<;> Sie sind Draußen! Staffel %(EventClass_Name) hat deinen jämmerlichen Arsch rausgeschmissen.

Static say_Liftoff $= %iftrue(EventClass_PlayerControlled,'Abheben vom Planeten<;>Schiff ist von der Oberfläche abgehoben<;>Start!<;>Startsequenz im Gange Kommandant','Schiff abgesetzt<;>Start des Schiffes in die Umlaufbahn')
Static say_LaunchSRV $= Setze Aufklärungsfahrzeug mit %(EventClass_Loadout) ab.
Static say_LaunchFighter $= "{{{Jäger startet Kommandant<;>Einsatz Fighter}}}, %iftrue(EventClass_PlayerControlled,\" Bereiten Sie sich auf die Kontrollübernahme vor\", \" Das Besatzungsmitglied übernimmt das Kommando\") "
Static say_LaunchDrone $= Starte %(EventClass_FriendlyType) Drohne<;>%(EventClass_FriendlyType) Drohne gestartet
Static say_LeaveBody $= {{{Verlasse <;>Abreise aus }}}%body(EventClass_Body,EventStarSystem,say_ss) ,Kommandant

Static say_LeftSquadron $= Verlasse Staffel %(EventClass_Name)<;>Geschwader %(EventClass_Name) verlassen

Static say_LoadoutEquipModule $= Zusätzliches %(EventClass_ModuleName_Localised) an %(EventClass_SuitName_Localised), für Konfiguration %rv(EventClass_LoadoutName,suit_loadoutrename)
Static say_LoadoutRemoveModule $= Entferne %(EventClass_ModuleName_Localised) von %(EventClass_SuitName_Localised), für Konfiguration %rv(EventClass_LoadoutName,suit_loadoutrename)

Static say_MaterialCollected $= %(EventClass_Count) Stück %(EventClass_FriendlyName) gesammelt
Static say_MaterialDiscarded $= %(EventClass_Count) Stück %(EventClass_FriendlyName) gelöscht
Static say_MaterialDiscovered $= Neues Material %(EventClass_FriendlyName) entdeckt
Static say_MaterialTrade $= %(EventClass_Paid_Quantity) Stück %(EventClass_Paid_Material_Localised) getauscht für %(EventClass_Received_Quantity) Stück %(EventClass_Received_Material_Localised)
Static say_MarketBuy $= %(EventClass_Count) Einheiten %(EventClass_Type_Localised) gekauft, Kaufpreis ist %(EventClass_BuyPrice) Credits, Kosten sind %hnum(EventClass_TotalCost,HNumList) Credits
Static say_MarketSell $= %(EventClass_Count) Einheiten %(EventClass_Type_Localised) verkauft, Verkaufspreis ist %(EventClass_SellPrice) Credits, Ertrag %hnum(EventClass_TotalSale,HNumList) Credits, Gesamtgewinn %hnum(profit,HNumList) Credits
Static say_MiningRefined $= Raffinierte %(EventClass_FriendlyType)<;>%(EventClass_FriendlyType) raffiniert

Static say_MissionAbandoned $= %sc(EventClass_Name) wurde aufgegeben<;>Abgebrochener Auftrag %sc(EventClass_Name)<;>Abgebrochene Mission %sc(EventClass_Name)

Static say_MissionAccepted $= "%sc(EventClass_Name) akzeptiert %ifnotempty(EventClass_Faction,\"von Fraktion %rs(EventClass_Faction,say_ss),\")"
Static say_MissionAccepted $+= "%ifequal(EventClass_Name,\"Mission Courier\",\"Kuriermission\")"
Static say_MissionAccepted $+= "%ifequal(EventClass_Name,\"Mission Collect Industrial\",\"Industriegüter Sammel Mission\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_DestinationSystem,\" Ziel der Mission ist %star(EventClass_DestinationSystem,say_ss),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_DestinationStation,\" Station %(EventClass_DestinationStation),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_Target,\" Ziel ist %(EventClass_TargetLocalised),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_TargetFaction,\"von Fraktion %rs(EventClass_TargetFaction,say_ss),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_PassengerType,\"befördere %(EventClass_PassengerCount) Passagiere vom Typ %(EventClass_PassengerType).\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_Expiry,\" %datedeltaformatnow(EventClass_Expiry,'Diese Mission läuft ab in [d Tag{en|} ][h Stunde{n|} ][Md Minute{n|} ][Sh Sekunde{n|}].','Diese Mission ist abgelaufen am [D]',longdatetime)\")"

Static say_MissionCompleted $= "{{{Herzlichen Glückwunsch, <;>gut gemacht, Kommandant, <;>Gute Arbeit, <;>Großartig! }}} %sc(EventClass_Name) abgeschlossen %ifnotempty(EventClass_Faction,\"von Fraktion %rs(EventClass_Faction,say_ss), \")"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_Target,\" Ziel war %(EventClass_TargetLocalised), \")"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_TargetFaction,\"von Fraktion %rs(EventClass_TargetFaction,say_ss), \")"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_Reward,\"Belohnung sind %hnum(EventClass_Reward,HNumList) Credits\")"

Static say_MissionFailed $= %sc(EventClass_Name) ist fehlgeschlagen<;>Mission fehlgeschlagen %sc(EventClass_Name)
Static say_MissionRedirected $= Mission %(EventClass_LocalisedName) hat ihr Ziel auf %(EventClass_NewDestinationStation) in System geändert %(EventClass_NewDestinationSystem)<;>Neues Ziel für Mission %(EventClass_LocalisedName), fliege zu %(EventClass_NewDestinationStation) in System %(EventClass_NewDestinationSystem)

Static say_ModuleBuy $= "Modul %sc(EventClass_BuyItemLocalised) ausgerüstet %ifnonzero(EventClass_BuyPrice,', Kosten %hnum(EventClass_BuyPrice,HNumList) Credits'), auf Schiff %ship(EventClass_Ship) in %ifnotcontains(EventClass_Slot,\"slot\",\"slot \") %sc(EventClass_Slot)."
// when new func system comes in, fix this back to hnum.. condition execution
Static say_ModuleBuy $+= "%ifnotempty(EventClass_SellItemLocalised,\" Modul %(EventClass_SellItemLocalised) für %hnum(EventClass_SellPrice,HNumList) Credits verkauft.\")"

Static say_ModuleRetrieve $= "Modul %sc(EventClass_RetrievedItemLocalised) abgerufen und an das Schiff %ship(EventClass_Ship) in %ifnotcontains(EventClass_Slot,\"slot\",\"slot \")%sc(EventClass_Slot) montiert."
Static say_ModuleSell $= "Modul %sc(EventClass_SellItemLocalised) entfernt, Rückerstattungspreis ist %hnum(EventClass_SellPrice,HNumList) Credits, im Schiff %ship(EventClass_Ship) in %ifnotcontains(EventClass_Slot,\"slot\",\"slot \")%sc(EventClass_Slot)."
Static say_ModuleSellRemote $= Remote-Modul %sc(EventClass_SellItemLocalised) verkauft, Verkaufspreis ist %hnum(EventClass_SellPrice,HNumList) Credits.
Static say_ModuleStore $= "Modul %sc(EventClass_StoredItemLocalised) vom Schiff %ship(EventClass_Ship) demontiert. %ifnotempty(EventClass_Cost,\"Die Kosten für das Lagern sind %hnum(EventClass_Cost,HNumList) Credits\")"
Static say_ModuleSwap $= "Austausch von Modulen zwischen %ifnotcontains(EventClass_FromSlot,\"slot\",\"slot \")%sc(EventClass_FromSlot) und %ifnotcontains(EventClass_ToSlot,\"slot\",\"slot \")%sc(EventClass_ToSlot)"
Static say_MassModuleStore $= Mehrere Module vom Schiff %ship(EventClass_Ship) gelagert.

Static say_NavBeaconScan $= %(EventClass_NumBodies) Körper in diesem System gescannt.
Static say_NpcCrewPaidWage $= Besatzungsmitglied %(EventClass_Name) bekam %hnum(EventClass_Amount,HNumList) Credits Lohn<;> Lohn, %hnum(EventClass_Amount,HNumList) Credits für Besatzungsmitglied %(EventClass_Name)
Static say_NpcCrewRank $= {{{Glückwünsche!<;>Gute Arbeit!}}} Besatzungmitglied %(EventClass_Name) wurde zum %sc(EventClass_RankCombat) befördert.

Static say_PayBounties $= "Kopfgeld in Höhe von %(EventClass_Amount) Credits bezahlt Kommandant %ifnonzero(EventClass_BrokerPercentage,\", mit einer Provision von %(EventClass_BrokerPercentage) Prozent an den Broker\")"

Static say_PayFines $= "Strafen in Höhe von %(EventClass_Amount) Credits bezahlt Kommandant%ifnonzero(EventClass_BrokerPercentage,\", mit einer Provision von %(EventClass_BrokerPercentage) Prozent an den Broker\")"
Static say_PayLegacyFines $= "Bußgelder in Höhe von %(EventClass_Amount) Credits bezahlt Kommandant%ifnonzero(EventClass_BrokerPercentage,\", mit einer Provision an den Makler von %(EventClass_BrokerPercentage) Prozent\")"
Static say_Promotion $= Herzlichen Glückwunsch, Sie wurden befördert!
Static say_Promotion $+= "%ifnotempty(EventClass_Combat,\", Kampfrang %sc(EventClass_Combat)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Trade,\", Handelsrang %sc(EventClass_Trade)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Explore,\", Erkunderrang %sc(EventClass_Explore)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Federation,\", Föderationsrang %sc(EventClass_Federation)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Empire,\", Imperiumsrang %sc(EventClass_Empire)\")"
Static say_PowerplayCollect $= Gesammelte Powerplay-Rohstoffe zur Lieferung für %(EventClass_Power), %sc(EventClass_Type), %(EventClass_Count) Stück
Static say_PowerplayDefect $= Überlaufen von %(EventClass_FromPower) zu %(EventClass_ToPower)
Static say_PowerplayDeliver $= Lieferung von Powerplay-Rohstoffen für Macht %(EventClass_Power), %sc(EventClass_Type), %(EventClass_Count) Stück
Static say_PowerplayFastTrack $= Schnelle Zahlung an die Macht %(EventClass_Power), Kosten sind %hnum(EventClass_Cost,HNumList) Credits
Static say_PowerplayJoin $= Beitritt zu %(EventClass_Power), viel Glück Kommandant
Static say_PowerplayLeave $= Verlassen von %(EventClass_Power)
Static say_PowerplaySalary $= Power-Play-Gehalt erhalten von %(EventClass_Power) in Höhe von %hnum(EventClass_Amount,HNumList) Credits
Static say_PowerplayVote $= Für die Macht %(EventClass_Power) gestimmt, Übernahme des Systems %star(EventClass_System,say_ss), Die Stimmen sind derzeit %(EventClass_Votes)
Static say_PowerplayVoucher $= "Belohnung für Power Play-Kampf von %(EventClass_Power) in Systemen %expandarray(EventClass_Systems,\", \",0,20,splitcaps)"
Static say_PVPKill $= Gratulation, dieser Abschaum %(EventClass_CombatRank) Kommandant %(EventClass_Victim) drückt jetzt im Himmel oder in der Hölle das Unkraut hoch<;>%(EventClass_CombatRank) Kommandant %(EventClass_Victim) in eine andere Welt entsandt<;>%(EventClass_CombatRank) Kommandant %(EventClass_Victim) . Er wusste nicht, was auf ihn zukommt, der Trottel

Static say_RebootRepair $= "Module neu starten und reparieren %expandarray(EventClass_FriendlySlots,\", \",0,20,splitcaps)"
Static say_RedeemVoucher $= "Löse %(EventClass_Type) mit Wert %hnum(EventClass_Amount,HNumList) Credits ein, %ifnotempty(EventClass_Faction,\" von Fraktion %sc(EventClass_Faction)\")%ifnonzero(EventClass_BrokerPercentage,\", mit einer Provision von %(EventClass_BrokerPercentage) Prozent an den Broker\")"

Static say_Repair $= {{{%(EventClass_ItemLocalised) repariert Kommandant<;>%(EventClass_ItemLocalised) repariert}}}. Kosten sind %hnum(EventClass_Cost,HNumList) Credits
Static say_RepairDrone $= Drohne reparierte %round(EventClass_HullRepaired,1,0.#) Rumpf, %round(EventClass_CockpitRepaired,1,0.#) Cockpit, %round(EventClass_CorrosionRepaired,1,0.#) Korrosion

Static say_RepairAll $= {{{Schaden repariert<;>Schiff vollständig repariert}}}{{{. Kosten %hnum(EventClass_Cost,HNumList) Credits. }}}Bereit für Action, Kommandant<;> Bereit zum Starten
Static say_RefuelAll $= {{{Schiff vollgetankt<;>Schiff betankt}}}, Kosten %(EventClass_Cost) Credits, Treibstoff %round(EventClass_Amount,1,0.0) Tonnen
Static say_RefuelPartial $= Schiff teilweise betankt, Kosten %(EventClass_Cost) Credits, Treibstoff %round(EventClass_Amount,1,0.0) Tonnen
Static say_RestockVehicle $= %(EventClass_Count) %(EventClass_Type) vom Typ %(EventClass_Loadout) gekauft, Kosten %hnum(EventClass_Cost,HNumList) Credits
Static say_Resurrect $= {{{Wie von Zauberhand leben Sie wieder, Kommandant %(Commander)<;>Wieder am Leben Kommandant, um einen weiteren Tag zu überleben}}} %ifnonzero(EventClass_Cost,', die Kosten waren  %hnum(EventClass_Cost,HNumList) Credits')
Static say_ReceiveText $= Nachricht von %(EventClass_FromLocalised), %(EventClass_MessageLocalised)

Static say_RenameSuitLoadout $= Bestätigt Kommandant, %(EventClass_SuitName_Localised) Konfiguration umbenannt in %rv(EventClass_LoadoutName,suit_loadoutrename)

Static say_SAAScanComplete $= Oberflächen-Scan-Analyse von %body(EventClass_BodyName,EventStarSystem,say_ss) abgeschlossen Kommandant, %(EventClass_ProbesUsed) Proben verbraucht<;> %body(EventClass_BodyName,EventStarSystem,say_ss), Scan komplett mit %(EventClass_ProbesUsed) verbrauchten Proben

Static say_SAASignalsFound $= %expandarray(EventClass_Signals,", ",1,20,'','_Type_Localised', ' und ') Oberflächensignale am Körper %body(EventClass_BodyName,EventStarSystem,say_ss) gefunden

Static say_SellExplorationData $= Verkaufte %(EventClass_SystemsCount) Sternsysteme für %hnum(EventClass_BaseValue,HNumList) Credits.
Static say_SellExplorationDataBonus $= Und entdeckten %(EventClass_DiscoveredCount) Körper für einen Bonus von %hnum(EventClass_Bonus,HNumList) Credits

Static say_MultiSellExplorationData $= Verkaufte %(EventClass_SystemsCount) Sternsysteme für %hnum(EventClass_TotalEarnings,HNumList) Credits.

Static say_ScanOrganic $= %(EventClass_ScanType) %(EventClass_Species_Localised), Gattung %(EventClass_Genus_Localised)
Static say_SellOrganicData $= Verkaufte %(EventClass_BiosCount) Biologische Daten für %hnum(EventClass_TotalValue,HNumList) Credits.
Static say_SellSuit $= %(EventClass_Name_Localised) für %hnum(EventClass_Price,HNumList) Credits verkauft
Static say_SellWeapon $= %(EventClass_Name_Localised) für %hnum(EventClass_Price,HNumList) Credits verkauft

Static suit_loadoutrename1 = "-<;> Bindestrich "
Static suit_loadoutrename2 = "_<;> Unterstrich "
Static suit_loadoutrename2 = ".<;> Punkt "
Static say_SwitchSuitLoadout $= {{{Kommandant, <;>Bestätigt Kommandant, <;> }}}Anzug gewechselt auf %(EventClass_SuitName_Localised), Inhalt %rv(EventClass_LoadoutName,suit_loadoutrename)
Static say_SuitLoadout $= {{{Kommandant, Sie tragen<;>Anzug ist}}} %(EventClass_SuitName_Localised), Inhalt %rv(EventClass_LoadoutName,suit_loadoutrename)

Static say_SellShipOnRebuy $= %(EventClass_ShipType) Typ Schiff für %hnum(EventClass_ShipPrice,HNumList) Credits zur Finanzierung des Rückkaufs des aktuellen Schiffs verkauft
Static say_SendText $= Nachricht an %(EventClass_To_Localised) gesendet

Static say_Scanned $= "Warnung, %ifequal(EventClass_ScanType,\"Cargo\",\"Fracht\",%(EventClass_ScanType)) Scan erkannt<;>Ein Schiff führt einen %ifequal(EventClass_ScanType,\"Cargo\",\"Fracht\",%(EventClass_ScanType)) Scan auf uns aus<;>%ifequal(EventClass_ScanType,\"Cargo\",\"Fracht\",%(EventClass_ScanType)) Scan erkannt, Kommandant<;>Wir werden auf %ifequal(EventClass_ScanType,\"Cargo\",\"Fracht\",%(EventClass_ScanType)) gescannt<;>%ifequal(EventClass_ScanType,\"Cargo\",\"Fracht\",%(EventClass_ScanType)) Scan erkannt"

// always said on star
Static say_ScanStar $= "Stern %Body(EventClass_BodyName,EventStarSystem,say_ss), %(EventClass_StarTypeText) %ifgt(EventClass_EstimatedValue,19999,\", Wert %hnum(EventClass_EstimatedValue,HNumList) Credits\") gescannt"
// gated on ScanStarMassDisable
Static say_ScanStarMassMag $= , %roundnz(EventClass_nStellarMass,1,0.#,4) Sternmassen
Static say_ScanStarMassMag $+= , Absolute Helligkeit %round(EventClass_nAbsoluteMagnitude,1,M0.#) mag
Static say_ScanStarInOrbit $= , Umlaufzeit %round(period,1,0.#) Tage
Static say_ScanStarRadius $= , Radius %roundnz(radius,2,0.#,4) Sonnen
Static say_ScanStarAge $= , Alter %hnum(%eval('%(EventClass_nAge)*1000000.0'),HNumList) Jahre

// always said on planet
Static say_ScanPlanet $= "%Body(EventClass_StarSystem,EventStarSystem,say_ss) %Body(EventClass_BodyName,EventStarSystem,say_ss) %ifnotempty(EventClass_TerraformState,\",%sc(EventClass_TerraformState)\"),"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Metal-rich body\",\"Metallreicher Planet\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"High metal content world\",\"Planet mit hochwertigen Metallen\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Rocky body\",\"Gesteinsplanet\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Icy body\",\"Eisplanet\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Rocky ice world\",\"Felsiger Eisplanet\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Earth-like world\",\"Erdähnliche Welt\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Water world\",\"Wasserwelt\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Ammonia world\",\"Ammoniak-Welt\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Water giant\",\"Wasserriese\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Water giant with life\",\"Wasserriese mit Leben\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Gas giant with water-based life\",\"Gasriese mit wasserbasiertem Leben\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Gas giant with ammonia-based life\",\"Gasriese mit ammoniakbasiertem Leben\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Sudarsky Class I gas giant\",\"Gasriese Klasse I\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Sudarsky Class II gas giant\",\"Gasriese Klasse II\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Sudarsky Class III gas giant\",\"Gasriese Klasse III\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Sudarsky Class IV gas giant\",\"Gasriese Klasse IV\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Sudarsky Class V gas giant\",\"Gasriese Klasse V\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Helium-rich gas giant\",\"Heliumreicher Gasriese\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Helium gas giant\",\"Helium-Gasriese\")"
Static say_ScanPlanet $+= "%ifequal(EventClass_PlanetClass,\"Unknown planet type\",\"Unbekannte Planetenart\")"
Static say_ScanPlanet $+= " gescannt"
// gated on ScanPlanetBasicInformationDisable
Static say_ScanPlanetCredits $= "%ifgt(EventClass_EstimatedValue,19999,\", %hnum(EventClass_EstimatedValue,HNumList) Credits\")"
Static say_ScanPlanetDistance $= , Entfernung %hnum(EventClass_DistanceFromArrivalLS,HNumList) Lichtsekunden
Static say_ScanPlanetLandable $= , Landbar
Static say_ScanPlanetAtmosphere $= , %ifequal(EventClass_AtmosphereID,"No_atmosphere","Keine ")
Static say_ScanPlanetAtmosphere $+= %ifcontains(EventClass_AtmosphereProperty,"Hot","heiße, ")
Static say_ScanPlanetAtmosphere $+= %ifcontains(EventClass_AtmosphereProperty,"Thick","dichte, ")
Static say_ScanPlanetAtmosphere $+= %ifcontains(EventClass_AtmosphereProperty,"Thin","dünne, ")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Earth_Like","erdähnliche")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Ammonia","Ammoniak")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Water","Wasser")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Carbon_dioxide","Kohlendioxid")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Methane","Metan")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Helium","Helium")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Argon","Argon")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Neon","Neon")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Sulphur_dioxide","Schwefeldioxid")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Nitrogen","Stickstoff")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Silicate_vapour","Silikatdampf")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Metallic_vapour","Metalldampf")
Static say_ScanPlanetAtmosphere $+= %ifequal(EventClass_AtmosphereID,"Oxygen","Sauerstoff")
Static say_ScanPlanetAtmosphere $+= %ifcontains(EventClass_AtmosphereProperty,"Rich","reiche")
Static say_ScanPlanetAtmosphere $+= " Atmosphäre"
Static say_ScanPlanetNoAtmosphere $= , Keine Atmosphäre
// gated on ScanPlanetExtendedInformationEnable
Static say_ScanPlanetVolcanism $= , %(EventClass_Volcanism)
Static say_ScanPlanetTidallyLocked $= , Gebundene Rotation
Static say_ScanPlanetRotation $= , Rotationszeitraum  %round(rotation,1,0.#) Tage
Static say_ScanPlanetOrbitalPeriod $= , Umlaufzeit %round(period,1,0.#) Tage
Static say_ScanPlanetMass $= , Masse %round(EventClass_nMassEM,3,0.###) Erdmassen
Static say_ScanPlanetMoonMass $= , Masse %roundnz(moonmass,2,0.##,4) Mondmassen
Static say_ScanPlanetRadius $= , Radius %round(radius,0,0.#) km
Static say_ScanPlanetGravity $= , Schwerkraft %roundnz(gravity,1,0.#,4) gee
Static say_ScanPlanetTemperature $= , Temperatur %round(EventClass_nSurfaceTemperature,0,0.#) kelvin
Static say_ScanPlanetPressure $= , Druck %roundnz(EventClass_nSurfacePressure,1,0.#,4) Pascal
Static say_ScanPlanetNoSurfacePressure $= , Kein Oberflächendruck
// gated on ScanPlanetMaterialInformationEnable
Static say_ScanPlanetMaterials $= ", Materialien erkannt %ExpandVars(EventClass_Materials_,\", \",0,1000,\"nameonly splitcaps\")"

// If Nav sequence is in operation, gated on SpeechNavBeacon being Summary
Static say_ScanNav $= %(navbeaconstarcount) Stern %ifgt(navbeaconstarcount,'1','s') und %(navbeaconplanetcount) andere Körper. %(navbeaconextra)
Static say_ScanNavPlanetEarthlike $= "%(EventClass_BodyName) ist erdähnlich, "
Static say_ScanNavPlanetAmmonia $= "%(EventClass_BodyName) ist eine Wasser-Welt, "
Static say_ScanNavPlanetWaterWorld $= "%(EventClass_BodyName) ist eine Ammoniak-Welt, "
Static say_ScanNavStarBlackHole $= "%(EventClass_BodyName) ist ein Schwarzes Loch, "
Static say_ScanNavStarNeutron $= "%(EventClass_BodyName) ist ein Neutronenstern, "

Static say_Screenshot $= Bildschirmfoto des Körpers %body(EventClass_Body,EventStarSystem,say_ss) aufgenommen
Static say_ScientificResearch $= Beitrag zur wissenschaftlichen Forschung %sc(EventClass_Name), %(EventClass_Count) Einheiten, %sc(EventClass_Category) Kategorie

Static say_SearchAndRescue $= Lieferung %(EventClass_Count) %(EventClass_FriendlyName) zu Such- und Rettungskontakt. Belohnung ist %(EventClass_Reward) Credits
Static say_SellDrones $= %(EventClass_Count) %(EventClass_Type) für %(EventClass_TotalSale) Credits verkauft
Static say_SelfDestruct $= Vorbereitung für den Start der Fluchtkapsel Kommandant, Selbstzerstörung

Static say_SharedBookmarkToSquadron $= Lesezeichen mit Geschwader %(EventClass_Name) geteilt

Static say_ShipTargeted1 $+= Pilot %(EventClass_PilotName_Localised), %(EventClass_PilotRank), in einer %ship(EventClass_Ship_Localised)
Static say_ShipTargeted2 $+= Schild %round(EventClass_ShieldHealth,1,0.#) Prozent, Rumpf %round(EventClass_HullHealth,1,0.#) Prozent
Static say_ShipTargeted3 $+= "%ifeq(levelscanned,0,\"Ziel %(EventClass_PilotName_Localised), \")"
Static say_ShipTargeted3 $+= %ifnotequal(EventClass_LegalStatus,'Lawless','Schiff ist %(EventClass_LegalStatus)')%ifnotempty(EventClass_Bounty,', Kopfgeld %hnum(EventClass_Bounty,HNumList) Credits') %ifnotempty(EventClass_Faction,', Fraktion %(EventClass_Faction)')

Static say_SRVDestroyed $= {{{Bumm<;>Explosion<;>Kapau}}} Ihr SRV ist zerstört. Rückkehr zum Mutterschiff 
Static say_SystemsShutdown $= {{{Warnung, <;>Achtung, <;>Sei vorbereitet, }}}{{{Feindliches Schiff<;>Anderes Schiff}}} hat die Systeme deaktiviert

Static say_ShipyardBuy $= Schiff %ship(EventClass_ShipType) gekauft, Kosten %hnum(EventClass_ShipPrice,HNumList) Credits
Static say_ShipyardBuy $+= "%ifnotempty(EventClass_StoreOldShip,\", Schiff %ship(EventClass_StoreOldShip) in hangar eingelagert\")"
Static say_ShipyardBuy $+= "%ifnotempty(EventClass_SellOldShip,\", Schiff %ship(EventClass_SellOldShip) für %(EventClass_SellPrice) Credits verkauft\")"
Static say_ShipyardSell $= "Schiff %ship(EventClass_ShipType) für %hnum(EventClass_ShipPrice,HNumList) Credits verkauft%ifnotempty(EventClass_System, \" in system %star(EventClass_System,say_ss)\")"
Static say_ShipyardNew $= {{{Herzlichen Glückwunsch }}}{{{zum Kauf eines brandneuen<;>zu Ihrem Neukauf von einer}}} %ship(EventClass_ShipType) Schiff
Static say_ShipyardSwap $= Schiff %ship(EventClass_StoreOldShip) mit einer %ship(EventClass_ShipType) getauscht
Static say_ShipyardTransfer $= Bestellte den Transfer des Schiffes %ship(EventClass_ShipType) 
Static say_ShipyardTransfer $+= %ifnonzero(EventClass_Distance,' von System %star(EventClass_FromSystem,say_ss), Entfernung %round(EventClass_Distance,1,0.0) Lichtjahre, Eintreffen in %eval("%(EventClass_nTransferTime)/60.0","ERROR","0.#") Minuten')
Static say_ShipyardTransfer $+= , Kosten %hnum(EventClass_TransferPrice,HNumList) Credits

Static say_SupercruiseEntry $= Warp Generatoren an<;>Supercruiseflug gestartet<;>F S A Antrieb gestartet<;>Festhalten, Supercruise-Flug<;> F S A an
Static say_SupercruiseExit $= {{{Verlasse Supercruiseflug<;>Normaler Raum Kommandant<;>F S A aus, Impuls Antrieb eingeschaltet}}}
Static say_SupercruiseExit $+= "%ifnotempty(EventClass_BodyType,\", Angekommen bei %(EventClass_BodyType)\") %ifnotempty(EventClass_Body,\" %body(EventClass_Body,EventStarSystem,say_ss)\")"

Static say_shieldsdown $= Alarm, Schilde sind ausgefallen, Ausweichmanöver<;>Schilde sind unten<;>Gefahr! Keine Schilde, weg hier!<;>Keine Panik, aber wir haben keine Schilde!
Static say_shieldsup $= Schilde wiederhergestellt<;>Schilde wieder online Kommandant<;>Schilde einsatzbereit, Kommandant

Static say_SetUserShipName $= Ich nenne dieses Schiff vom Typ %ship(EventClass_Ship) %(EventClass_ShipName) mit der Registrierung %(EventClass_ShipIdent).  Möge Gott alle segnen, die in ihm die Sterne bereisen!

Static say_StartJump $= "%ifcontains(EventClass_JumpType,\"Hyperspace\",\"%expand(say_StartHyperspace)\",\"%expand(say_StartSupercruise)\")"
Static say_StartHyperspace $= "{{{Bereiten Sie sich auf den Hyperraum vor<;>Springe<;>betrete Hyperraum<;>Warpe}}} zum System %star(EventClass_StarSystem,say_ss), "
Static say_StartHyperspace $+= %ifcontains(EventClass_FriendlyStarClass,'Black Hole','Warnung, Stern ist gefährlich, drosseln Sie jetzt, ')
Static say_StartHyperspace $+= %ifcontains(EventClass_FriendlyStarClass,'Neutron','Warnung, Stern ist gefährlich, runterregeln, ')
Static say_StartHyperspace $+= %ifcontains(EventClass_FriendlyStarClass,'White Dwarf','Warnung, Stern ist gefährlich, jetzt stoppen, ')
Static say_StartHyperspace $+= "%(EventClass_FriendlyStarClass), "
Static say_StartHyperspace $+= %ifcontains("O B A F G K M",EventClass_StarClass,' Treibstoff sammeln möglich',' Treibstoff sammeln nicht möglich'). {{{Festhalten!<;>. In wohrp<;>. Machen sie es so!<;>Energie!<;>. im Hyperraum}}}
Static say_StartSupercruise $= Betrete Supercruisereiseflug<;>Bereite Supercruisereiseflug vor

Static say_Synthesis $= Synthese von %sc(EventClass_Name) durchgeführt

Static say_SquadronCreated $= Neues Geschwader %(EventClass_Name) erstellt<;>Geschwader %(EventClass_Name) erstellt
Static say_SquadronDemotion $= {{{Du musst ungezogen gewesen sein!<;>auweh<;>Oh nein!}}}, Sie wurden von Ihrem Geschwader %(EventClass_Name) zum Rang %(EventClass_NewRank) degradiert
Static say_SquadronPromotion $= {{{Gut gemacht<;> Glückwunsch<;> Bravo!}}} Sie wurden von Ihrem Geschwader %(EventClass_Name) in den Rang %(EventClass_NewRank) befördert

Static say_Touchdown $= %iftrue(EventClass_PlayerControlled,'{{{Landung erfolgreich, Kommandant<;>Gelandet, Kommandant<;>Landung!}}}{{{ bei geographischer Breite %round(EventClass_Latitude,2,M0.##), Längengrad  %round(EventClass_Longitude,2,M0.##), }}}Gut gemacht, Kommandant<;>Triebwerke aus<;>Bereiten Sie sich auf Oberflächenoperationen vor','Das Schiff ist aus dem Orbit zurückgekehrt und bereit zum Einsteigen<;>Schiff gelandet, bereit an Bord zu gehen')
Static say_TechnologyBroker $= "Der Technologie-Broker hat einen Gegenstand freigeschaltet: %expandarray(EventClass_ItemsUnlocked,\", \",0,9,\"\",\"_Name_Localised\")"

Static say_Undocked $= Abgedockt von %sc(EventClass_StationName) guten Flug Kommandant<;>Schiff bereit, Sie haben die Kontrolle Kommandant<;> Maschinen laufen, verlassen %sc(EventClass_StationName)<;>Verlassen Station %sc(EventClass_StationName)
Static say_USSDrop $= In U S S Typ %(EventClass_USSTypeLocalised) gefallen, Bedrohungsstufe ist %(EventClass_USSThreat)

Static say_UpgradeSuit $= {{{Kommandant, <;>}}}Aufwertung von %(EventClass_Name_Localised) Klasse %(EventClass_Class)%ifnonzero(EventClass_Cost,', Kosten waren %hnum(EventClass_Cost,HNumList) Credits')
Static say_UpgradeWeapon $= {{{Kommandant, <;>}}}Aufwertung von %(EventClass_Name_Localised) zu Klasse %(EventClass_Class)%ifnonzero(EventClass_Cost,', Kosten waren %hnum(EventClass_Cost,HNumList) Credits')
Static say_UseConsumable $= {{{Kommandant, <;>}}}%(EventClass_Resource_Name_Localised) verbraucht

Static say_VehicleSwitch $= Wechsle zu %sc(EventClass_To)

Static say_WingAdd $= Kommandant %sc(EventClass_Name) hat sich dem Geschwader angeschlossen
Static say_WingJoin $= "Geschwader %expandarray(EventClass_Others,\", Kommandant \", 0, 32) betreten"
Static say_WingLeave $= Verlasse Geschwader Kommandant
Static say_WingInvite $= Eingeladen in das Geschwader von Kommandant %(EventClass_Name)

Static say_WonATrophyForSquadron $= Herzlichen Glückwunsch, Sie haben eine Trophäe für Geschwader %(EventClass_Name) gewonnen
// other stuff

Static say_EDSM $= EDSM First discovery

// VP30, surveyor
// The list of Event Names from surveyor (encoded in say_surveyor_<trigger>) is in the Action Document under onSurveyor event
// only included the ones which add information over the basic scan output
Static say_surveyor_prefixphrase $= "Landvermesser berichtet für Körper %(KörperKurzname), "
Static say_surveyor_Discovery $= "Eine Entdeckung, %(Daten), "
Static say_surveyor_MiningSignals $= "Bergbau-Signale, "
Static say_surveyor_GeoSignals $= "Geologische Signale, "
Static say_surveyor_BioSignals $= "Biologische Signale, "
Static say_surveyor_ThargoidSignals $= "Thargoid-Signale, "
Static say_surveyor_GuardianSignals $= "Wächter-Signale, "
Static say_surveyor_HumanSignals $= "Menschliche Signale, "
Static say_surveyor_OtherSignals $= "Andere Signale, "
Static say_surveyor_TinyPlanetRadius $= "Winziger Radius, "
Static say_surveyor_HugePlanetRadius $= "Großer Radius, "
Static say_surveyor_HighGravity $= "Warnung vor hoher Schwerkraft %(data) Gee, "
Static say_surveyor_Earthlike $= "Das ist ein erdähnlicher Planet!, "
Static say_surveyor_WaterWorld $= "Wasserwelt, "
Static say_surveyor_AmmoniaWorld $= "Ammoniak-Welt, "

Rem subsitution patterns (ss1,ss2 etc) for faction and body name fields
Static say_ssn0 $= "-; Strich "
Static say_ssn1 $= " I ; 1 "
Static say_ssn2 $= " II ; 2 "
Static say_ssn3 $= " III ; 3 "
Static say_ssn4 $= "q\" IV ; 4 \""
Static say_ssn5 $= " V ; 5 "
Static say_ssn6 $= "G.;G "

Rem say subsitution patterns, applied after the phrase has been made, are called say_txN in the same form as above.

Static say_tx1 $= terraforming; Terra Forming
Static say_tx2 $= terraformable; terraformbar
Static say_tx3 $= "CMDR ;Kommandant "
Static say_tx4 $= " Cr ; Credits "
Static say_tx5 $= "Mk. ;Mark "
Static say_tx6 $= " CMDRs; Kommandanten"
Static say_tx7 $= " cmdr; Kommandanten"
Static say_tx8 $= "O7; Grüße "
Static say_tx9 $= " O7; , Gruß"
Rem removed, matching 61.07 Static say_tx10 $= "R;[^0-9]07; Salute Commander, "
Static say_tx11 $= "R;\s+07; Grüße Kommandant, "

Rem print Replace Test
Rem print %replacevar("Hello O7","say_tx")
Rem print %replacevar("O7","say_tx")
Rem print %replacevar("07","say_tx")
Rem print %replacevar(" 907","say_tx")

// Phonemes

If SpeechControls NotPresent Or SpeechControls NotContains SSMLDisable;

    // From EDDI
    Static say_tx_power1 = Archon Delaine;<phoneme alphabet='ipa' ph='ˈɑːkɒn'>Archon</phoneme> <phoneme alphabet='ipa' ph='dəˈleɪn'>Delaine</phoneme>
    Static say_tx_power2 = Aisling Duval;<phoneme alphabet='ipa' ph='ˈæʃlɪŋ'>Aisling</phoneme> <phoneme alphabet='ipa' ph='duːˈvæl'>Duval</phoneme>
    Static say_tx_power3 = Arissa Lavigny-Duval;<phoneme alphabet='ipa' ph='əˈrɪsə'>Arissa</phoneme> <phoneme alphabet='ipa' ph='ləˈviːniː'>Lavigny</phoneme> <phoneme alphabet='ipa' ph='duːˈvæl'>Duval</phoneme>
    Static say_tx_power4 = Denton Patreus;<phoneme alphabet='ipa' ph='ˈdɛntən'>Denton</phoneme> <phoneme alphabet='ipa' ph='pətˈreɪəs'>Patreus</phoneme>
    Static say_tx_power5 = Edmund Mahon;<phoneme alphabet='ipa' ph='ˈɛdmənd'>Edmund</phoneme> <phoneme alphabet='ipa' ph='ˈmɑːn'>Mahon</phoneme>
    Static say_tx_power6 = Felicia Winters;<phoneme alphabet='ipa' ph='fəˈlɪʃɪə'>Felicia</phoneme> <phoneme alphabet='ipa' ph='ˈwɪntəs'>Winters</phoneme>
    Static say_tx_power7 = Pranav Antal;<phoneme alphabet='ipa' ph='pɜːnʌv'>Pranav</phoneme> <phoneme alphabet='ipa' ph='ˌænˈtæl'>Antal</phoneme>
    Static say_tx_power8 = Zachary Hudson;<phoneme alphabet='ipa' ph='ˈzækərɪ'>Zachary</phoneme> <phoneme alphabet='ipa' ph='ˈhʌdsən'>Hudson</phoneme>
    Static say_tx_power9 = Zemina Torval;<phoneme alphabet='ipa' ph='zəˈmiːnə'>Zemina</phoneme> <phoneme alphabet='ipa' ph='tɔːˈvæl'>Torval</phoneme>
    Static say_tx_power10 = Li Yong-Rui;<phoneme alphabet='ipa' ph='liː'>Li</phoneme> <phoneme alphabet='ipa' ph='ˈjɒŋ'>Yong</phoneme> <phoneme alphabet='ipa' ph='reɪ'>Rui</phoneme>
    Static say_tx_power11 = Yuri Grom;<phoneme alphabet='ipa' ph='jʊəˈriː'>Yuri</phoneme> <phoneme alphabet='ipa' ph='ˈɡrɒm'>Grom</phoneme>

    Rem bad phonemes say_tx_star54 = r;\b(Taygeta)\b;<phoneme alphabet='ipa' ph = 'teɪˈɪdtə'>Taygeta</phoneme>
    Rem say_tx_star14 = r;\b(Celaeno)\b;<phoneme alphabet='ipa' ph = 'sᵻˈliːnoʊ'>Celaeno</phoneme>

    Static say_tx_star1 = r;\b(Achenar)\b;<phoneme alphabet='ipa' ph = 'ˈakɜːnɑ'>Achenar</phoneme>
    Static say_tx_star2 = r;\b(Acihault)\b;<phoneme alphabet='ipa' ph = 'əˈsɪhɔːt'>Acihault</phoneme>
    Static say_tx_star3 = r;\b(Adan)\b;<phoneme alphabet='ipa' ph = 'ˈædən'>Adan</phoneme>
    Static say_tx_star4 = r;\b(Alcyone)\b;<phoneme alphabet='ipa' ph = 'ælˈsaɪəniː'>Alcyone</phoneme>
    Static say_tx_star5 = r;\b(Aldebaran)\b;<phoneme alphabet='ipa' ph = 'alˈdɛbəɹən'>Aldebaran</phoneme>
    Static say_tx_star6 = r;\b(Anemoi)\b;<phoneme alphabet='ipa' ph = 'æˈniːmɔɪ'>Anemoi</phoneme>
    Static say_tx_star7 = r;\b(Apoyota)\b;<phoneme alphabet='ipa' ph = 'æˈpɔɪəʊtə'>Apoyota</phoneme>
    Static say_tx_star8 = r;\b(Arque)\b;<phoneme alphabet='ipa' ph = 'ɑːrk'>Arque</phoneme>
    Static say_tx_star9 = r;\b(Asterope)\b;<phoneme alphabet='ipa' ph = 'əˈstɛroʊpiː'>Asterope</phoneme>
    Static say_tx_star10 = r;\b(Atlas)\b;<phoneme alphabet='ipa' ph = 'ˈætləs'>Atlas</phoneme>
    Static say_tx_star11 = r;\b(Aulin)\b;<phoneme alphabet='ipa' ph = 'ˈɔːlɪn'>Aulin</phoneme>
    Static say_tx_star12 = r;\b(Bunda)\b;<phoneme alphabet='ipa' ph = 'ˈbuːndə'>Bunda</phoneme>
    Static say_tx_star13 = r;\b(Cayutorme)\b;<phoneme alphabet='ipa' ph = 'ˈkaɪətɔːm'>Cayutorme</phoneme>
    Static say_tx_star15 = r;\b(Ceos)\b;<phoneme alphabet='ipa' ph = 'ˈkeɪɒs'>Ceos</phoneme>
    Static say_tx_star16 = r;\b(Cygnus)\b;<phoneme alphabet='ipa' ph = 'ˈsɪɡnəs'>Cygnus</phoneme>
    Static say_tx_star17 = r;\b(Deciat)\b;<phoneme alphabet='ipa' ph = 'ˈdɛsiːæt'>Deciat</phoneme>
    Static say_tx_star18 = r;\b(Diso )\b;<phoneme alphabet='ipa' ph = 'ˈdiːsəʊ'>Diso</phoneme>
    Static say_tx_star19 = r;\b(Djiwal)\b;<phoneme alphabet='ipa' ph = 'ˈdʒɪwæl'>Djiwal</phoneme>
    Static say_tx_star20 = r;\b(Dvorsi)\b;<phoneme alphabet='ipa' ph = 'ˈdvɔːsiː'>Dvorsi</phoneme>
    Static say_tx_star21 = r;\b(Electra)\b;<phoneme alphabet='ipa' ph = 'ɪˈlɛktrə'>Electra</phoneme>
    Static say_tx_star22 = r;\b(Eravate)\b;<phoneme alphabet='ipa' ph = 'ɛrəˈvɑːtˌeɪ'>Eravate</phoneme>
    Static say_tx_star23 = r;\b(Eranin)\b;<phoneme alphabet='ipa' ph = 'ˈɛrənin'>Eranin</phoneme>
    Static say_tx_star24 = r;\b(Frigaha)\b;<phoneme alphabet='ipa' ph = 'frɪɡˈɑːhɑːr'>Frigaha</phoneme>
    Static say_tx_star25 = r;\b(Grandmort)\b;<phoneme alphabet='ipa' ph = 'ˈɡʀɒdˌmɔʀ'>Grandmort</phoneme>
    Static say_tx_star26 = r;\b(Hecate)\b;<phoneme alphabet='ipa' ph = 'ˈhɛkətɪ'>Hecate</phoneme>
    Static say_tx_star27 = r;\b(Hotas)\b;<phoneme alphabet='ipa' ph = 'həʊtæs'>Hotas</phoneme>
    Static say_tx_star28 = r;\b(Isleta)\b;<phoneme alphabet='ipa' ph = 'aɪlˈetə'>Isleta</phoneme>
    Static say_tx_star29 = r;\b(i Bootis)\b;<phoneme alphabet='ipa' ph = 'aɪ'>i</phoneme><phoneme alphabet='ipa' ph = 'bəʊˈəʊtɪs'>Bootis</phoneme>
    Static say_tx_star30 = r;\b(Lave)\b;<phoneme alphabet='ipa' ph = 'leɪv'>Lave</phoneme>
    Static say_tx_star31 = r;\b(Kaia Bajaja)\b;<phoneme alphabet='ipa' ph = 'ˈkaɪə'>Kaia</phoneme><phoneme alphabet='ipa' ph = 'ˈbɑːhɑːhɑː'>Bajaja</phoneme>
    Static say_tx_star32 = r;\b(Kigana)\b;<phoneme alphabet='ipa' ph = 'kiːˈɡɑːnə'>Kigana</phoneme>
    Static say_tx_star33 = r;\b(Kini)\b;<phoneme alphabet='ipa' ph = 'ˈkiːniː'>Kini</phoneme>
    Static say_tx_star34 = r;\b(Kremainn)\b;<phoneme alphabet='ipa' ph = 'krəˈmeɪn'>Kremainn</phoneme>
    Static say_tx_star35 = r;\b(Laksak)\b;<phoneme alphabet='ipa' ph = 'ˈlæks.æk'>Laksak</phoneme>
    Static say_tx_star36 = r;\b(Leesti)\b;<phoneme alphabet='ipa' ph = 'ˈliːstiː'>Leesti</phoneme>
    Static say_tx_star37 = r;\b(Leucos)\b;<phoneme alphabet='ipa' ph = 'ˈluːkɒs'>Leucos</phoneme>
    Static say_tx_star38 = r;\b(Luyten's Star)\b;<phoneme alphabet='ipa' ph = 'ˈlaʊ.təns'>Luyten's</phoneme><phoneme alphabet='ipa' ph = 'stɑː'>Star</phoneme>
    Static say_tx_star39 = r;\b(Maia)\b;<phoneme alphabet='ipa' ph = 'ˈmaɪ.ə'>Maia</phoneme>
    Static say_tx_star40 = r;\b(Mata)\b;<phoneme alphabet='ipa' ph = 'ˈmɑː.tʌ'>Mata</phoneme>
    Static say_tx_star41 = r;\b(Merope)\b;<phoneme alphabet='ipa' ph = 'ˈmɛrəpiː'>Merope</phoneme>
    Static say_tx_star42 = r;\b(Mu Koji)\b;<phoneme alphabet='ipa' ph = 'mjuː'>Mu</phoneme><phoneme alphabet='ipa' ph = 'ˈkəʊdʒiː'>Koji</phoneme>
    Static say_tx_star43 = r;\b(Nuenets)\b;<phoneme alphabet='ipa' ph = 'ˈnjuːənɛts'>Nuenets</phoneme>
    Static say_tx_star44 = r;\b(Okinura)\b;<phoneme alphabet='ipa' ph = 'ɒkɪˈnjʊrə'>Okinura</phoneme>
    Static say_tx_star45 = r;\b(Orrere)\b;<phoneme alphabet='ipa' ph = 'ɒrˈɪər'>Orrere</phoneme>
    Static say_tx_star46 = r;\b(Pai Szu)\b;<phoneme alphabet='ipa' ph = 'paɪ'>Pai</phoneme><phoneme alphabet='ipa' ph = 'ʃuː'>Szu</phoneme>
    Static say_tx_star47 = r;\b(Pleione)\b;<phoneme alphabet='ipa' ph = 'ˈplaɪəniː'>Pleione</phoneme>
    Static say_tx_star48 = r;\b(Procyon)\b;<phoneme alphabet='ipa' ph = 'ˈprəʊˌsɪən'>Procyon</phoneme>
    Static say_tx_star49 = r;\b(Potriti)\b;<phoneme alphabet='ipa' ph = 'pəˈtriːtɪ'>Potriti</phoneme>
    Static say_tx_star50 = r;\b(Reorte)\b;<phoneme alphabet='ipa' ph = 'ˌriːˈɔːt'>Reorte</phoneme>
    Static say_tx_star51 = r;\b(Sakti)\b;<phoneme alphabet='ipa' ph = 'ˈsæk.tiː'>Sakti</phoneme>
    Static say_tx_star52 = r;\b(Shinrarta Dezhra)\b;<phoneme alphabet='ipa' ph = 'ʃɪnˈrɑːrtə'>Shinrarta</phoneme><phoneme alphabet='ipa' ph = 'ˈdezɦrə'>Dezhra</phoneme>
    Static say_tx_star53 = r;\b(Surya)\b;<phoneme alphabet='ipa' ph = 'ˈsuːˈrɪːˈɛr'>Surya</phoneme>
    Static say_tx_star55 = r;\b(Tse)\b;<phoneme alphabet='ipa' ph = 'ʃjɛ'>Tse</phoneme>
    Static say_tx_star56 = r;\b(Xihe)\b;<phoneme alphabet='ipa' ph = 'ʃiː.hər'>Xihe</phoneme>
    Static say_tx_star57 = r;\b(Xinca)\b;<phoneme alphabet='ipa' ph = 'ˈʃɛnkə'>Xinca</phoneme>
    Static say_tx_star58 = r;\b(Yakabugai)\b;<phoneme alphabet='ipa' ph = 'ˈjækəbuːɡaɪ'>Yakabugai</phoneme>
    Static say_tx_star59 = r;\b(Zaonce)\b;<phoneme alphabet='ipa' ph = 'ˈzeɪɒns'>Zaonce</phoneme>
    Static say_tx_star60 = r;\b(Zhang Fei)\b;<phoneme alphabet='ipa' ph = 'ʈʂáŋ'>Zhang</phoneme><phoneme alphabet='ipa' ph = 'feɪ'>Fei</phoneme>

    Static say_tx_constellation1 = r;\b(Alrai)\b;<phoneme alphabet='ipa' ph = 'ˈalraɪ'>Alrai</phoneme>
    Static say_tx_constellation2 = r;\b(Antliae)\b;<phoneme alphabet='ipa' ph = 'ˈæntlɪˌiː'>Antliae</phoneme>
    Static say_tx_constellation3 = r;\b(Aquarii)\b;<phoneme alphabet='ipa' ph = 'əˈkwɛərɪˌaɪ'>Aquarii</phoneme>
    Static say_tx_constellation4 = r;\b(Arietis)\b;<phoneme alphabet='ipa' ph = 'əˈraɪɪtɪs'>Arietis</phoneme>
    Static say_tx_constellation5 = r;\b(Bei Dou)\b;<phoneme alphabet='ipa' ph = 'beɪ'>Bei</phoneme><phoneme alphabet='ipa' ph = 'ˈduː'>Dou</phoneme>
    Static say_tx_constellation6 = r;\b(Blanco)\b;<phoneme alphabet='ipa' ph = 'blæŋkˌəʊ'>Blanco</phoneme>
    Static say_tx_constellation7 = r;\b(Bleae Thaa)\b;<phoneme alphabet='ipa' ph = 'bliːiː'>Bleae</phoneme><phoneme alphabet='ipa' ph = 'θɑː'>Thaa</phoneme>
    Static say_tx_constellation8 = r;\b(Bleae Thua)\b;<phoneme alphabet='ipa' ph = 'bliːiː'>Bleae</phoneme><phoneme alphabet='ipa' ph = 'θuːə'>Thua</phoneme>
    Static say_tx_constellation9 = r;\b(Capricorni)\b;<phoneme alphabet='ipa' ph = 'ˌkæprɪˈkɔːnaɪ'>Capricorni</phoneme>
    Static say_tx_constellation10 = r;\b(Cepheus)\b;<phoneme alphabet='ipa' ph = 'ˈsiːfjuːs'>Cepheus</phoneme>
    Static say_tx_constellation11 = r;\b(Cephei)\b;<phoneme alphabet='ipa' ph = 'ˈsiːfɪˌaɪ'>Cephei</phoneme>
    Static say_tx_constellation12 = r;\b(Ceti)\b;<phoneme alphabet='ipa' ph = 'ˈsiːtaɪ'>Ceti</phoneme>
    Static say_tx_constellation13 = r;\b(Chi)\b;<phoneme alphabet='ipa' ph = 'kaɪ'>Chi</phoneme>
    Static say_tx_constellation14 = r;\b(Crucis)\b;<phoneme alphabet='ipa' ph = 'ˈkruːsɪs'>Crucis</phoneme>
    Static say_tx_constellation15 = r;\b(Cygni)\b;<phoneme alphabet='ipa' ph = 'ˈsɪɡnaɪ'>Cygni</phoneme>
    Static say_tx_constellation16 = r;\b(Eta Carina)\b;<phoneme alphabet='ipa' ph = 'ˈiːtə'>Eta</phoneme><phoneme alphabet='ipa' ph = 'kəˈriːnə'>Carina</phoneme>
    Static say_tx_constellation17 = r;\b(Fornacis)\b;<phoneme alphabet='ipa' ph = 'fɔːˈneɪsɪs'>Fornacis</phoneme>
    Static say_tx_constellation18 = r;\b(Herculis)\b;<phoneme alphabet='ipa' ph = 'hɜːkjʊˈlɪs'>Herculis</phoneme>
    Static say_tx_constellation19 = r;\b(Hyades)\b;<phoneme alphabet='ipa' ph = 'ˈhaɪəˌdiːz'>Hyades</phoneme>
    Static say_tx_constellation20 = r;\b(Hydrae)\b;<phoneme alphabet='ipa' ph = 'ˈhaɪdriː'>Hydrae</phoneme>
    Static say_tx_constellation21 = r;\b(Lupus)\b;<phoneme alphabet='ipa' ph = 'ˈluːpəs'>Lupus</phoneme>
    Static say_tx_constellation22 = r;\b(Lyncis)\b;<phoneme alphabet='ipa' ph = 'ˈlɪnsɪs'>Lyncis</phoneme>
    Static say_tx_constellation23 = r;\b(Omega)\b;<phoneme alphabet='ipa' ph = 'ˈəʊmɪɡə'>Omega</phoneme>
    Static say_tx_constellation24 = r;\b(Ophiuchus)\b;<phoneme alphabet='ipa' ph = 'ɒˈfjuːkəs'>Ophiuchus</phoneme>
    Static say_tx_constellation25 = r;\b(Pegasi)\b;<phoneme alphabet='ipa' ph = 'ˈpɛɡəˌsaɪ'>Pegasi</phoneme>
    Static say_tx_constellation26 = r;\b(Persei)\b;<phoneme alphabet='ipa' ph = 'ˈpɜːsɪˌaɪ'>Persei</phoneme>
    Static say_tx_constellation27 = r;\b(Piscium)\b;<phoneme alphabet='ipa' ph = 'ˈpaɪsɪəm'>Piscium</phoneme>
    Static say_tx_constellation28 = r;\b(Pleiades)\b;<phoneme alphabet='ipa' ph = 'ˈplaɪədiːz'>Pleiades</phoneme>
    Static say_tx_constellation29 = r;\b(Puppis)\b;<phoneme alphabet='ipa' ph = 'ˈpʌpɪs'>Puppis</phoneme>
    Static say_tx_constellation30 = r;\b(Pru Euq)\b;<phoneme alphabet='ipa' ph = 'pruː'>Pru</phoneme><phoneme alphabet='ipa' ph = 'juːk'>Euq</phoneme>
    Static say_tx_constellation31 = r;\b(Rho Ophiuchi)\b;<phoneme alphabet='ipa' ph = 'rəʊ'>Rho</phoneme><phoneme alphabet='ipa' ph = 'ɒˈfjuːkaɪ'>Ophiuchi</phoneme>
    Static say_tx_constellation32 = r;\b(Sagittarius)\b;<phoneme alphabet='ipa' ph = 'ˌsædʒˈtɛəriəs'>Sagittarius</phoneme>
    Static say_tx_constellation33 = r;\b(Scorpii)\b;<phoneme alphabet='ipa' ph = 'ˈskɔːpɪˌaɪ'>Scorpii</phoneme>
    Static say_tx_constellation34 = r;\b(Shui Wei)\b;<phoneme alphabet='ipa' ph = 'ˈʃuːi'>Shui</phoneme><phoneme alphabet='ipa' ph = 'weɪ'>Wei</phoneme>
    Static say_tx_constellation35 = r;\b(Tau Ceti)\b;<phoneme alphabet='ipa' ph = 'taʊ'>Tau</phoneme><phoneme alphabet='ipa' ph = 'ˈsiːtaɪ'>Ceti</phoneme>
    Static say_tx_constellation36 = r;\b(Tascheter)\b;<phoneme alphabet='ipa' ph = 'ˈtɑːʃətɜː'>Tascheter</phoneme>
    Static say_tx_constellation37 = r;\b(Trianguli)\b;<phoneme alphabet='ipa' ph = 'traɪˈæŋˌɡjʊˌlaɪ'>Trianguli</phoneme>
    Static say_tx_constellation38 = r;\b(Trifid)\b;<phoneme alphabet='ipa' ph = 'ˈtraɪfɪd'>Trifid</phoneme>
    Static say_tx_constellation39 = r;\b(Tucanae)\b;<phoneme alphabet='ipa' ph = 'tuːˈkɑːniː'>Tucanae</phoneme>
    Static say_tx_constellation40 = r;\b(Wredguia)\b;<phoneme alphabet='ipa' ph = 'ˈredɡaɪə'>Wredguia</phoneme>

// Set speech = "Welcome to Tucanae"
// rem  Set speech = "%replacevar(speech,\"say_tx\")"
// Set speech = %replacevar(speech,"say_tx")
// print %(speech)

Static HNumList = Minus;Billion;Milliarde;Million;Tausend;Hundert

Global SpeechDefinitionFile = SetUpLanguageGerman
Static SpeechCulture = de-de

If SpeechControls NotPresent
    Print ****
    Print Setting voice pack control to default values, use the Add-On menu Voice Pack Configuration to reconfigure
    Print ****
    PersistentGlobal SpeechControls = NPCVoicesEnable;FirstJumpOnly;FSDFactionDisable;EDSMSummaryEnable;EDSMMoonsEnable;EDSMSubMoonsEnable;EDSMAtmosphereEnable;EDSMVolcanismEnable;NPCTextsEnable

If NPCVoiceNames NotPresent
    Perform voicenames                                          // we set this up to static since the user has not selected them explicitly.. when they do its a PerisistentGlobal
    Static NPCVoiceNames = %(VoiceNames)
    Rem Print Temp init of %(NPCVoiceNames)

Static DockingMusic = 0

END PROGRAM

//*************************************************************
// onStartup
// Events: onStartup
//*************************************************************
PROGRAM onStartup

Rem Print VP %(ActionPackName) %(ActionPackFilePath)

Call SetUpLanguage

Set speech = %(say_welcome)

If SpeechControls IsPresent And SpeechControls NotContains WelcomeMessageDisable;
    Call speak(speech="%(speech)")

Print Voice Pack installed, running on EDD Version %version(1).%version(2).%version(3).%version(4)
Call Initialise

END PROGRAM

//*************************************************************
// onInstall
// Events: onInstall
//*************************************************************
PROGRAM onInstall

If InstallList Contains VoicePack
    Call SetUpLanguage
    Say %(say_install)
Call Initialise

END PROGRAM

//*************************************************************
// Initialise
// Events: None
//*************************************************************
PROGRAM Initialise

MenuItem VoiceMenuConfigureVoice,add-ons,"Sprachsynthese-Konfiguration",speaker
MenuItem VoiceMenuConfigureText,add-ons,"Sprache Textnachrichten Sprachkonfiguration",speaker
MenuItem VoiceMenuConfigureNPCEffects,add-ons,"Stimme NPC-Sprachkonfiguration",speaker
MenuItem VoiceMenuConfigureVerbosity,add-ons,"Voice Pack-Konfiguration",speaker
MenuItem VoiceMenuConfigureNPCVoices,add-ons,"NPC-Stimme wählen",speaker
MenuItem VoiceMenuConfigureSpeechFile,add-ons,"Sprachdatei bearbeiten",missioncompleted
MenuItem VoiceMenuShowHelp,help,"Voice Pack",speaker

END PROGRAM

//*************************************************************
// SetUpLanguage
// Events: None
//*************************************************************
PROGRAM SetUpLanguage

Rem do these.. If %(CurrentCulture) Contains sv
Call SetUpLanguageGerman

END PROGRAM

//*************************************************************
// onShutdown
// Events: onShutdown
//*************************************************************
PROGRAM onShutdown

Set speech = '%phrase("%expand(say_shutdown)","<;>","{{{","}}}")'
If SpeechControls IsPresent And SpeechControls NotContains WelcomeMessageDisable;
    Call speak(speech="%(speech)",Wait=1)

END PROGRAM

//*************************************************************
// onRefreshEnd
// Events: onRefreshEnd
//*************************************************************
PROGRAM onRefreshEnd

If %(RefreshCount) <= 1
    Event PREFIX LAST_ LAST
    Ledger PREFIX LED_ AtOrBefore %(LAST_JID)
    Event PREFIX RK_ LAST Rank
    Rem pragma dumpvars LAST*
    Set speech = '%phrase("%expand(say_refresh)","<;>","{{{","}}}")'

    If SpeechControls IsPresent And SpeechControls NotContains WelcomeMessageDisable;
        Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// ReceiveText
// Events: ReceiveText
//*************************************************************
PROGRAM ReceiveText

// •    Channel: (wing/local/voicechat/friend/player/npc/squadron/starsystem)

Let sayit = 0

If EventClass_Channel Contains Squadron
    Let sayit = "%IsPresent(SpeechControls,\"SquadronTextsEnable;\")"
Else If EventClass_Channel Contains Wing
    Let sayit = "%IsPresent(SpeechControls,\"WingTextsEnable;\")"
Else If EventClass_Channel Contains Local
    Let sayit = "%IsPresent(SpeechControls,\"LocalTextsEnable;\")"
Else If EventClass_Channel Contains Friend
    Let sayit = "%IsPresent(SpeechControls,\"FriendTextsEnable;\")"
Else If EventClass_Channel Contains Voice
    Let sayit = "%IsPresent(SpeechControls,\"VoiceChatTextsEnable;\")"
Else If EventClass_Channel Contains Star
    Let sayit = "%IsPresent(SpeechControls,\"StarSystemTextsEnable;\")"
Else If EventClass_Channel Contains Player
    Let sayit = "%IsPresent(SpeechControls,\"PlayerTextsEnable;\")"
Else If EventClass_Channel Contains NPC
    Let sayit = "!%IsPresent(SpeechControls,\"NPCChatterDisable;\")"
Else 
    Let sayit = "%IsPresent(SpeechControls,\"AnyOtherTextsEnable;\")"

If sayit IsFalse
    Rem print not saying mate %(EventClass_Channel)
    Return 

If EventClass_Channel $!= npc                                   // non NPC, is said by the text computer voice
    If SpeechControls NotContains TEXTVoicesEnable;
        Set v = say_%(EventClass_EventTypeStr)                  // make up variable name from event name
        Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'
        // passing -999 or empty string makes the options inert
        Call speak(speech="%(speech)",Volume="%ExistsDefault(TextVolume,'-999')",Voice="%ExistsDefault(TextVoiceName,'')",Rate="%ExistsDefault(TextVoiceRate,'-999')",EffectVars="%ExistsDefault(TextVoiceEffects,'')")
    Else 
        Set from = %(EventClass_FromLocalised)
        Set textvar = "say_text_%SafeVarName(\"%(from)\")"
        If "%exist(\"%(textvar)\")" IsTrue
            Set voice = %indirect(textvar)
            Set pitchshift = "%expand(\"%(textvar)_pitch\")"
            Set rate = "%expand(\"%(textvar)_rate\")"
        Else 
            Let voicecount = %WordListCount(NPCVoiceNames)
            // print %(NPCVoiceNames) count %(voicecount)
            Let rnvoice = %Random(voicecount)
            Set voice = %WordListEntry(NPCVoiceNames,rnvoice)
            // print ..pick %(rnvoice) %(voice)

            // if same as co-pilot voice, shift it off
            If SpeechVoice IsPresent And voice $== %(SpeechVoice)
                If %Random(2) == 0
                    Let pitchshift = 70+%Random(20)
                Else 
                    Let pitchshift = 107+%Random(15)
            Else 
                Let pitchshift = 70+%Random(50)

            If pitchshift < 80
                Let rate = %Random(3)+1
            Else If pitchshift < 101
                Let rate = %Random(5)-2
            Else 
                Let rate = %Random(4)-2
            Static %(textvar) = %(voice)
            Static %(textvar)_pitch = %(pitchshift)
            Static %(textvar)_rate = %(rate)

        // Print for %(from) chose %(voice) at pitch %(pitchshift) rate %(rate)

        If TextVoiceEffects IsPresent
            Set effects = NoGlobalEffects=1,%(TextVoiceEffects),PitchShift=%(pitchshift)
        Else 
            Set effects = NoGlobalEffects=1,PitchShift=%(pitchshift)

        Set speech = '%(EventClass_MessageLocalised)'

        Call speak(speech="%(speech)",Volume="%ExistsDefault(TextVolume,'-999')",EffectVars="%(effects)",Voice="%(voice)",Rate="%(rate)",QueueLimit="20000")

Else If SpeechControls NotContains NPCVoicesEnable;
    Set v = say_%(EventClass_EventTypeStr)                      // make up variable name from event name
    Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'
    Call speak(speech="%(speech)",Volume="%ExistsDefault(TextVolume,'-999')",Voice="%ExistsDefault(TextVoiceName,'')",Rate="%ExistsDefault(TextVoiceRate,'-999')",EffectVars="%ExistsDefault(TextVoiceEffects,'')")
Else 
    Rem pragma dumpvars *
    Set from = %(EventClass_FromLocalised)
    Set npcvar = "say_npc_%SafeVarName(\"%(from)_%(EventWhereAmI)\")"
    If "%exist(\"%(npcvar)\")" IsTrue
        Set voice = %indirect(npcvar)
        Set pitchshift = "%expand(\"%(npcvar)_pitch\")"
        Set rate = "%expand(\"%(npcvar)_rate\")"
    Else 
        Let voicecount = %WordListCount(NPCVoiceNames)
        // print %(NPCVoiceNames) count %(voicecount)
        Let rnvoice = %Random(voicecount)
        Set voice = %WordListEntry(NPCVoiceNames,rnvoice)
        // print ..pick %(rnvoice) %(voice)

        If SpeechVoice IsPresent And voice $== %(SpeechVoice)
            If %Random(2) == 0
                Let pitchshift = 70+%Random(20)
            Else 
                Let pitchshift = 107+%Random(10)
        Else 
            Let pitchshift = 70+%Random(40)

        If pitchshift < 80
            Let rate = %Random(3)+1
        Else If pitchshift < 101
            Let rate = %Random(4)-1
        Else 
            Let rate = %Random(4)-2
        Static %(npcvar) = %(voice)
        Static %(npcvar)_pitch = %(pitchshift)
        Static %(npcvar)_rate = %(rate)
        // Print for %(from) chose %(voice) at pitch %(pitchshift) rate %(rate)

    Set effectspath = %systempath(EDDSOUNDFOLDER)
    Set presound = %(effectspath)\\npcprefix.mp3
    Set postsound = %(effectspath)\\npcpostfix.mp3
    Set mixsound = %(effectspath)\\npcmix.mp3

    // print %(presound) %(postsound)
    If %fileexists(presound) IsFalse Or SpeechControls Contains NPCSoundsDisable
        Set presound = ""
    If %fileexists(postsound) IsFalse Or SpeechControls Contains NPCSoundsDisable
        Set postsound = ""
    If %fileexists(mixsound) IsFalse Or SpeechControls Contains NPCSoundsDisable
        Set mixsound = ""

    // print Result %(presound) %(postsound) %(mixsound)

    Set speech = %(EventClass_MessageLocalised)

    If NPCVoiceEffects IsPresent
        Set effects = NoGlobalEffects=1,%(NPCVoiceEffects),PitchShift=%(pitchshift)
    Else 
        Set effects = NoGlobalEffects=1,PitchShift=%(pitchshift)

    Set volume = %ExistsDefault(NPCVoiceVolume,'-999')

    // Print NPC Sound effects %(effects) : rate %(rate) : voice %(voice) : volume %(volume)
    // we override the SoundEffects global by providing at least on speech effect, PitchShift, or the effect vars if present
    Call speak(speech="%(speech)",Volume="%(volume)",EffectVars="%(effects)",Voice="%(voice)",PrefixSound="%(presound)",PostfixSound="%(postsound)",MixSound="%(mixsound)",Rate="%(rate)",QueueLimit="5000")

END PROGRAM

//*************************************************************
// ShipTargeted
// Events: ShipTargeted
//*************************************************************
PROGRAM ShipTargeted

If SpeechControls NotPresent Or SpeechControls NotContains TargetReportingDisabled;
    If %(EventClass_TargetLocked) == 0
        Set v = say_ShipLostTarget
        Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'
        Call speak(speech="%(speech)", QueueLimit="1000")
    Else If %(EventClass_ScanStage) >= 1
        // Pragma dumpvars TargetVars*
        // DeleteVariable TargetVars*                                      // remove any of these so we start afresh after each entry to a scene

        Set var = TargetVars_%(EventWhereAmI)_%(EventClass_PilotName_Localised)_%(EventClass_Ship)_%(EventClass_PilotRank)
        Set levelscanned = 0
        If "%exist(\"%(var)\")" IsTrue
            Set levelscanned = %indirect(var)

        Rem print Stage %(EventClass_ScanStage) %(var) ..Scanned to %(levelscanned) .. var %(var)

        If %(levelscanned) < %(EventClass_ScanStage)
            Set v = say_%(EventClass_EventTypeStr)%(EventClass_ScanStage)
            Static %(var) = %(EventClass_ScanStage)
            Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'
            Call speak(speech="%(speech)", QueueLimit = "4000")
Else 
    Rem print Off

END PROGRAM

//*************************************************************
// SupercruiseExit
// Events: SupercruiseExit
//*************************************************************
PROGRAM SupercruiseExit

Call GenericResponse(EventClass_*=Pass,Trigger*=Pass,EventStar*=Pass)
DeleteVariable TargetVars*                                      // remove any of these so we start afresh after each entry to a scene

END PROGRAM

//*************************************************************
// HullDamage
// Events: HullDamage
//*************************************************************
PROGRAM HullDamage

Let health100 = %(EventClass_Health)*100
Let health = %floor(health100,N0)
If health < 50
    Set speech = '%phrase("%expand(say_HullDamageCritical)","<;>","{{{","}}}")'
    Call speak(speech="%(speech)", Volume=100)
Else 
    Set speech = '%phrase("%expand(say_HullDamage)","<;>","{{{","}}}")'
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// CommitCrime
// Events: CommitCrime
//*************************************************************
PROGRAM CommitCrime

If EventClass_Bounty IsNotEmpty
    Set speech = %expand(say_CommitCrimeBounty)
Else 
    Set speech = %expand(say_CommitCrimeFine)

Set speech = '%phrase("%(speech)","<;>","{{{","}}}")'
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// CommunityGoal
// Events: CommunityGoal
//*************************************************************
PROGRAM CommunityGoal

// Prevent repeats
If SpeechCGList NotPresent Or SpeechCGList $!= %(EventClass_CommunityGoalList)
    Static SpeechCGList = %(EventClass_CommunityGoalList)
    Call GenericResponse(EventClass_*=Pass,Trigger*=Pass)

END PROGRAM

//*************************************************************
// FSDResponse
// Events: FSDJump(QueueLimit=5000)
//*************************************************************
PROGRAM FSDResponse

Event FROM %(EventJID) INFO

// EVENT does not work during debugging using script.. so just set to 2
If EC_JID == 0
    Set EC_VisitCount = 2

Set visit = %expand(say_FSDJumpVisit)
Set visit = %wordof(visit, EC_VisitCount)

Set speech = %expand(say_FSDJump)
If EventClass_FuelLevel <= 4
    Set speech += '%phrase("%expand(say_FSDJumpFuelWarning)","<;>","{{{","}}}")'

If SpeechControls NotPresent Or SpeechControls NotContains FuelLevelDisable;
    If EventClass_FuelUsed >= 0.1
        Set speech += '%phrase("%expand(say_FSDJumpFuel)","<;>","{{{","}}}")'

If (EventClass_Faction IsNotEmpty) And (SpeechControls NotPresent Or SpeechControls NotContains FSDFactionDisable;)
    Set speech += '%phrase("%expand(say_FSDJumpFaction)","<;>","{{{","}}}")'

If SpeechControls IsPresent And SpeechControls Contains FirstJumpOnly; And EC_VisitCount >= 2
    Call speak(speech="%(speech)", Priority=High)
Else 
    Call speak(speech="%(speech)",FinishEvent=FSD, Priority=High)
    Static ScanSystem = %(EventStarSystem)

Static FSSAllBodiesFoundAllowed = 1                             // allow FSSAllbodies found

END PROGRAM

//*************************************************************
// NavBeaconScan
// Events: NavBeaconScan
//*************************************************************
PROGRAM NavBeaconScan

Call GenericResponse(EventClass*=PASS,Trigger*=Pass)
Static navbeacontime = %TickCount()
Static navbeaconcounter = %(EventClass_NumBodies)
Static navbeaconstarcount = 0
Static navbeaconplanetcount = 0
Static navbeaconextra = ""

END PROGRAM

//*************************************************************
// Scan
// Events: Scan
//*************************************************************
PROGRAM Scan

Event FROM %(EventJID) INFO

// pragma dumpvars EventClass*

If navbeaconcounter IsPresent
    If navbeaconcounter > 0 And %eval(%TickCount()-%(navbeacontime)) < 30000
        StaticLet navbeaconcounter = %(navbeaconcounter)-1
        Rem print %(navbeaconcounter)
        Set sel = %ExistsDefault(SpeechNavBeacon,'Summary')
        If sel Contains "No Speech"
            End 
        If sel Contains Summary
            If %(EventClass_IsStar) IsTrue
                Static navbeaconstarcount = %eval(%(navbeaconstarcount)+1)
                If %(EventClass_StarTypeID) $== H
                    Static navbeaconextra += %expand(say_ScanNavStarBlackHole)
                If %(EventClass_StarTypeID) $== N
                    Static navbeaconextra += %expand(say_ScanNavStarNeutron)
            Else 
                Static navbeaconplanetcount = %eval(%(navbeaconplanetcount)+1)
                If %(EventClass_PlanetTypeID) Contains Earthlike_body
                    Static navbeaconextra += %expand(say_ScanNavPlanetEarthlike)
                If %(EventClass_PlanetTypeID) Contains Water_world
                    Static navbeaconextra += %expand(say_ScanNavPlanetWaterWorld)
                If %(EventClass_PlanetTypeID) Contains Ammonia_world
                    Static navbeaconextra += %expand(say_ScanNavPlanetAmmonia)

            If navbeaconcounter == 0
                Set speech = %expand(say_ScanNav)
                Call speak(speech="%(speech)")
            End 

If %(EventClass_ScanType) $== AutoScan
    If SpeechControls NotPresent Or SpeechControls NotContains ScanAutoScanEnable;
        End 

If SpeechMinScanValue IsPresent And SpeechMinScanValue > %(EventClass_EstimatedValue)
    End 

// print discovered %(EventClass_WasDiscovered)
// print mapped %(EventClass_WasMapped)

If SpeechControls IsPresent And SpeechControls Contains ScanNotDiscovered And %(EventClass_WasDiscovered) $== 1    // $== because WasDiscovered is bool?
    // print was discovered
    End 

If SpeechControls IsPresent And SpeechControls Contains ScanNotMapped And %(EventClass_WasMapped) $== 1    // $== because WasMapped is bool?
    // print was mapped
    End 

If %(EventClass_IsStar) IsTrue
    Set speech = %expand(say_ScanStar)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanStarMassDisable;
        Set speech += %expand(say_ScanStarMassMag)

        If EventClass_nOrbitalPeriod IsNotEmpty And EventClass_nOrbitalPeriod > 0
            Let period = %(EventClass_nOrbitalPeriod)/86400.0
            Set speech += %expand(say_ScanStarInOrbit)

        If EventClass_nRadius IsNotEmpty And EventClass_nRadius > 0
            Let radius = %(EventClass_nRadius)/695700000.0
            Set speech += %expand(say_ScanStarRadius)

    Call speak(speech="%(speech)")
    End 

Else 
    If SpeechControls IsPresent And SpeechControls NotContains ScanPlanetBeltClusters; And EventClass_BodyName Contains "Belt Cluster"
        End                                                     // remove belt clusters

    Set speech = %expand(say_ScanPlanet)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanPlanetDistanceDisable;
        Set speech += %expand(say_ScanPlanetDistance)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanPlanetCreditsDisable;
        Set speech += %expand(say_ScanPlanetCredits)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanPlanetBasicInformationDisable;
        If EventClass_IsLandable IsNotEmpty
            If %(EventClass_IsLandable) IsTrue
                Set speech += %expand(say_ScanPlanetLandable)

        If %(EventClass_Atmosphere) IsNotEmpty And %(EventClass_Atmosphere) $!= None
            If %(EventClass_Atmosphere) $!= "Earth Like"        // ignore earth like atmos, we have already done it in the planet class
                Set speech += %expand(say_ScanPlanetAtmosphere)

        Else If EventClass_BodyName NotContains "Belt Cluster" And %(EventClass_IsBeltCluster) == 0
            Set speech += %expand(say_ScanPlanetNoAtmosphere)

    If SpeechControls IsPresent And SpeechControls Contains ScanPlanetExtendedInformationEnable;
        If %(EventClass_Volcanism) IsNotEmpty
            Set speech += %expand(say_ScanPlanetVolcanism)

        If %(EventClass_nTidalLock) $== 1
            Set speech += %expand(say_ScanPlanetTidallyLocked)
        Else If EventClass_nRotationPeriod IsNotEmpty
            Let rotation = %(EventClass_nRotationPeriod)/86400.0
            Set speech += %expand(say_ScanPlanetRotation)

        If EventClass_nOrbitalPeriod IsNotEmpty
            Let period = %(EventClass_nOrbitalPeriod)/86400.0
            Set speech += %expand(say_ScanPlanetOrbitalPeriod)

        If EventClass_nMassEM IsNotEmpty
            If %(EventClass_nMassEM) < 0.01
                Let moonmass = %(EventClass_nMassEM)/0.0123
                Set speech += %expand(say_ScanPlanetMoonMass)
            Else 
                Set speech += %expand(say_ScanPlanetMass)

        If EventClass_nRadius IsNotEmpty And EventClass_nRadius > 0
            Let radius = %(EventClass_nRadius)/1000.0
            Set speech += %expand(say_ScanPlanetRadius)

        If EventClass_nSurfaceGravity IsNotEmpty
            Let gravity = %(EventClass_nSurfaceGravity)/9.8
            Set speech += %expand(say_ScanPlanetGravity)

        If EventClass_nSurfaceTemperature IsNotEmpty
            Set speech += %expand(say_ScanPlanetTemperature)

        If %(EventClass_nSurfacePressure) IsNotEmpty And %(EventClass_nSurfacePressure) > 0
            Set speech += %expand(say_ScanPlanetPressure)
        Else 
            Set speech += %expand(say_ScanPlanetNoSurfacePressure)

    If SpeechControls IsPresent And SpeechControls Contains ScanPlanetMaterialInformationEnable;
        If %(EventClass_MaterialsCount) > 0
            Set speech += %expand(say_ScanPlanetMaterials)

    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// SellExplorationData
// Events: SellExplorationData
//*************************************************************
PROGRAM SellExplorationData

Set speech = '%phrase("%expand(say_SellExplorationData)","<;>","{{{","}}}")'

If EventClass_DiscoveredCount >= 1
    Set speech += " %phrase(\"%expand(say_SellExplorationDataBonus)\",\"<;>\",\"{{{\",\"}}}\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// MultiSellExplorationData
// Events: MultiSellExplorationData
//*************************************************************
PROGRAM MultiSellExplorationData

Set speech = '%phrase("%expand(say_MultiSellExplorationData)","<;>","{{{","}}}")'
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// Interdiction
// Events: Interdiction
//*************************************************************
PROGRAM Interdiction

If EventClass_Success IsTrue
    Set speech = '%phrase("%expand(say_InterdictionSuccess)","<;>","{{{","}}}")'
Else 
    Set speech = '%phrase("%expand(say_InterdictionFailure)","<;>","{{{","}}}")'

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// MarketSell
// Events: MarketSell
//*************************************************************
PROGRAM MarketSell

Let profit = (%(EventClass_SellPrice)-%(EventClass_AvgPricePaid))*%(EventClass_Count)
Set speech = '%phrase("%expand(say_MarketSell)","<;>","{{{","}}}")'
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// FSSAllBodiesFound
// Events: FSSAllBodiesFound
//*************************************************************
PROGRAM FSSAllBodiesFound

If FSSAllBodiesFoundAllowed NotPresent Or FSSAllBodiesFoundAllowed == 1
    Set speech = '%phrase("%expand(say_FSSAllBodiesFound)","<;>","{{{","}}}")'
    Call speak(speech="%(speech)")
    Static FSSAllBodiesFoundAllowed = 0

END PROGRAM

//*************************************************************
// Friends
// Events: Friends
//*************************************************************
PROGRAM Friends

If EventClass_Status $== ""
    If SpeechControls IsPresent And SpeechControls Contains FriendsStatusDisable;
        Rem no output
    Else 
        Let online = %(EventClass_OnlineCount)
        Let offline = %(EventClass_OfflineCount)
        Let totalother = %(EventClass_OtherCount)

        Static say_FriendsSummation $= "%ifnonzero(online,'%(online) %ifgt(online,\'1\',\'friends are\',\'friend is\') online.') "
        Static say_FriendsSummation $+= "%ifnonzero(offline,'%(offline) %ifgt(offline,\'1\',\'friends\',\'friend\') have gone offline.') "
        Static say_FriendsSummation $+= "%ifnonzero(totalother,'%(totalother) %ifgt(totalother,\'1\',\'other friend statuses are\',\'other status is\') available.') "
        // print %expand(say_FriendsSummation)

        Set speech = '%phrase("%expand(say_FriendsSummation)","<;>","{{{","}}}")'

        Call speak(speech="%(speech)", QueueLimit="2000" )
Else 
    If (EventClass_Status $== Online Or EventClass_Status $== Offline) And (SpeechControls IsPresent And SpeechControls Contains FriendsStatusDisable;)
        Rem Print mute Friends %(EventClass_Status) of %(EventClass_Name)
    Else 
        Call GenericResponse(EventClass_*=Pass,Trigger*=Pass,QueueLimit="2000")

END PROGRAM

//*************************************************************
// FSSSignalDiscovered
// Events: FSSSignalDiscovered(QueueLimit=4000)
//*************************************************************
PROGRAM FSSSignalDiscovered

If EventClass_SignalsCount == 1
    Set speech = '%phrase("%expand(say_FSSSignalDiscovered1)","<;>","{{{","}}}")'
Else 
    Set speech = '%phrase("%expand(say_FSSSignalDiscoveredN)","<;>","{{{","}}}")'

Call speak(speech="%(speech)", QueueLimit="2000" )

END PROGRAM

//*************************************************************
// SaySystemInfo
// Events: onSayFinished?(EventName $== FSD), onKeyPress?(KeyPress $== Alt+F11), onTimer?(TimerName $== ScanDelay)
//*************************************************************
PROGRAM SaySystemInfo

// Print SaySysInfo %(ScanSystem) %(TriggerName)

If EventStarSystem NotPresent                                   // due to being driven direct by a key, instead of via FSD..
    Event THPOS
    Static ScanSystem = %(EC_StarSystem)

If TriggerName $== onSayFinished                                // Trigger!
    Let delay = %random(10)*100+1000
    // print Delay Say is %(delay)
    Timer ScanDelay,%(delay)
    End 
ElseIf SpeechControls NotPresent Or SpeechControls NotContains EDSMInformationDisable;
    Scan EDSM  "%(ScanSystem)"
    // pragma dumpvars S_*

    Set speech = ""

    If S_EDSMLookup IsFalse Or S_EDSMNoData IsTrue
        Set speech += '%phrase("%expand(say_edsmscannoinfo)","<;>","{{{","}}}")'
    ElseIf SpeechControls IsPresent And SpeechControls Contains EDSMSummaryEnable;
        Let totalstars = 0
        Let totalplanets = 0

        Loop %(S_Stars),N
            Set prefix = S_Star_%(N)_
            Set type = "%indirect(\"%(prefix)type\")"
            If type $!= barycentre
                Let totalstars = %(totalstars)+1

            Set planets = "%indirect(\"%(prefix)Planets_Only\")"
            Let totalplanets = %(totalplanets)+%(planets)

        Set speech += '%phrase("%expand(say_edsmscanstarsplanets)","<;>","{{{","}}}")'
    Else 
        Set excludestars = "%existsdefault(SpeechEDSMStarExclusion,\"\")"

        Loop %(S_Stars),S
            Set prefix = S_Star_%(S)_
            Set planets = "%indirect(\"%(prefix)Planets\")"
            Set data = "%indirect(\"%(prefix)data\")"
            Set type = "%indirect(\"%(prefix)type\")"
            Set ownname = "%indirect(\"%(prefix)assignedname\")"
            Set starbodyname = "%indirect(\"%(prefix)bodyname\")"
            Set value = "%indirect(\"%(prefix)value\")"

            Let exclude = 0

            If type $== barycentre
                Set speech += %expand(say_edsmscanstarbarycentre)
            ElseIf data IsTrue
                Set starclass = "%indirect(\"%(prefix)startype\")"
                Set startype = "%indirect(\"%(prefix)startypetext\")"
                Set mass = "%indirect(\"%(prefix)stellarmass\")"

                Rem we are going to look for A, ,A or just A

                If excludestars Contains %(starclass), Or excludestars Contains ,%(starclass) Or excludestars $== %(starclass)
                    Let exclude = 1
                Else 
                    Set speech += %expand(say_edsmscanstarinfo)
            Else 
                Set speech += %expand(say_edsmscanstarnoinfo)

            If exclude IsFalse
                Loop %(planets),P
                    Set prefix = S_Planet_%(S)_%(P)_
                    Call saySystemInfoBody(prefix="%(prefix)",starname="%(starbodyname)",S_*$=1)
                    Set speech += %(ReturnValue)

                    If SpeechControls IsPresent And SpeechControls Contains EDSMMoonsEnable;
                        Set moons = "%indirect(\"%(prefix)Moons\")"

                        Loop %(moons),M
                            Set prefix = S_Moon_%(S)_%(P)_%(M)_
                            Call saySystemInfoBody(prefix="%(prefix)",starname="%(starbodyname)",S_*$=1)
                            Set speech += %(ReturnValue)

                            If SpeechControls IsPresent And SpeechControls Contains EDSMSubMoonsEnable;
                                Set submoons = "%indirect(\"%(prefix)Submoons\")"

                                Loop %(submoons),SM
                                    Set prefix = S_SubMoon_%(S)_%(P)_%(M)_%(SM)_
                                    Call saySystemInfoBody(prefix="%(prefix)",starname="%(starbodyname)",S_*$=1)
                                    Set speech += %(ReturnValue)

    If speech IsNotEmpty                                        // Because we may have decided not to say anything!
        Set speech = "%replacevar(speech,\"say_tx\")"
        Say %(speech),Priority=Low,Literal=1
        If SpeechControls IsPresent And SpeechControls Contains Subtitles; And SaySaid $!= !LIMIT
            Call subtitle(speech="%(SaySaid)")

END PROGRAM

//*************************************************************
// saySystemInfoBody
// Events: None
//*************************************************************
PROGRAM saySystemInfoBody

Rem prefix in, plus all S_ variables

Set pdata = "%indirect(\"%(prefix)data\")"

If pdata IsTrue
    Set pname = "%indirect(\"%(prefix)bodyname\")"
    // Print %(prefix) %(pname) %(starname)
    Set isstar = "%indirect(\"%(prefix)isstar\")"

    Rem print %(prefix) %(pname) star %(isstar)

    If isstar IsTrue
        Set stype = "%indirect(\"%(prefix)startypetext\")"
        Set mass = "%indirect(\"%(prefix)stellarmass\")"
        Set value = "%indirect(\"%(prefix)value\")"
        Return %expand(say_edsmscanbodystarinfo)

    Else 
        Set terraform = "%indirect(\"%(prefix)terraformstate\")"
        Set class = "%indirect(\"%(prefix)class\")"
        Set landable = "%indirect(\"%(prefix)landable\")"
        Set value = "%indirect(\"%(prefix)value\")"
        Set pname = %replace(pname,starname,'')

        Set speech = %expand(say_edsmscanbodyinfo)

        If SpeechControls IsPresent And SpeechControls Contains EDSMAtmosphereEnable;
            Set atmos = "%indirect(\"%(prefix)atmosphere\")"
            Set speech += %expand(say_edsmscanbodyinfoAtmos)

        If SpeechControls IsPresent And SpeechControls Contains EDSMVolcanismEnable;
            Set volcanism = "%indirect(\"%(prefix)volcanism\")"
            Set speech += %expand(say_edsmscanbodyinfoVolcanism)

        If SpeechControls IsPresent And SpeechControls Contains EDSMMaterialsEnable;
            Set matcount = "%indirect(\"%(prefix)MaterialsCount\")"
            If matcount > 0
                Set speech += %expand(say_edsmscanbodyinfoMat)
                Set speech += "%ExpandVars(\"%(prefix)Materials_\",\", \",1,1000,\"nameonly splitcaps\")"

        Set speech += ". "
        Return %(speech)
Else 
    Set ownname = "%indirect(\"%(prefix)assignedname\")"
    Return %expand(say_edsmscanbodynoinfo)

END PROGRAM

//*************************************************************
// EDSMSync
// Events: onEDSMSync
//*************************************************************
PROGRAM EDSMSync

If EventStarList $!= ""
    If SpeechControls IsPresent And SpeechControls NotContains EDSMFDDisable;
        Set speech = '%phrase("%expand(say_EDSM)","<;>","{{{","}}}")'
        Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// Menus
// Events: onMenuItem?(MenuName Contains VoiceMenu)
//*************************************************************
PROGRAM Menus

If MenuName Contains ConfigureCoPilot
    Rem sets the globals SpeechVoice, SpeechVolume, SpeechRate, SpeechEffects
    Perform ConfigureVoice "Configure Co-Pilot Voice Synthesis"

If MenuName Contains ConfigureNPCEffects
    Set vv = %ExistsDefault(NPCVoiceVolume,SpeechVolume,"60")
    Set ve = %ExistsDefault(NPCVoiceEffects,SpeechEffects,"")
    Perform ConfigureVoice "Configure NPC Voice Synthesis",NOVOICENAME,%(vv),NORATE,%(ve)
    If DialogResult IsTrue
        PersistentGlobal NPCVoiceVolume=%(Volume)
        PersistentGlobal NPCVoiceEffects=%(Effects)

If MenuName Contains ConfigureText
    Pragma dumpvars TextVoice* 
    Pragma dumpvars Speech*
    Set vn = %ExistsDefault(TextVoiceName,SpeechVoice,"Default")
    Set vv = %ExistsDefault(TextVoiceVolume,SpeechVolume,"60")
    Set vr = %ExistsDefault(TextVoiceRate,SpeechRate,"0")
    Set ve = %ExistsDefault(TextVoiceEffects,SpeechEffects,"")
    Perform ConfigureVoice "Configure Text Voice Synthesis",%(vn),%(vv),%(vr),%(ve)
    If DialogResult IsTrue
        PersistentGlobal TextVoiceName=%(VoiceName)
        PersistentGlobal TextVoiceVolume=%(Volume)
        PersistentGlobal TextVoiceRate=%(Rate)
        PersistentGlobal TextVoiceEffects=%(Effects)
        Pragma dumpvars TextV*

If MenuName Contains ConfigureSpeechFile
    Perform EditSpeechText

If MenuName Contains ConfigureNPCVoices
    Perform voicenames                                          // get the current list.. VoiceNames is quoted
    Let voicecount = %WordListCount(VoiceNames)
    Let i = 0
    Let vpos = 30
    Let width = 300
    While i < %(voicecount)
        Set voicename = %WordListEntry(VoiceNames,i)
        Let present = 0
        If NPCVoiceNames Contains "\"%(voicename)\""
            Let present = 1
        Rem print Voice %(voicename)
        Set dvar%(i) = "%(i),CheckBox,\"%(voicename)\",10,%(vpos),%eval(%(width)-10-10),20,\"Select\",%(present)"
        Let vpos = %(vpos) + 24
        Let i = %(i)+1

    Set dvarok = "OK,Button,\"OK\",%eval(%(width)-100),+40,80,20,\"Press for OK\""
    Set dvarcancel = "Cancel,Button,\"Cancel\",%eval(%(width)-200),+0,80,20,\"Press for Cancel\""

    Rem pragma dumpvars dvar*

    Dialog D1, "NPC Voice Configuration", "10,10", dvar

    While D1 $!= Cancel And D1 $!= Escape
        If D1 $== OK
            Let i = 0
            Set newvoicename = ""
            While i < %(voicecount)
                Set voicename = %WordListEntry(VoiceNames,i)
                DialogControl D1,Get "%(i)"
                If DialogResult == 1
                    If newvoicename $!= ""
                        Set newvoicename = "%(newvoicename),\"%(voicename)\""
                    Else 
                        Set newvoicename = "\"%(voicename)\""
                Let i = %(i)+1
            // print Selected voices %(newvoicename)
            // delete the variable in case its static, then set up
            DeleteVariable NPCVoiceNames
            PersistentGlobal NPCVoiceNames = %(newvoicename)
            // print Selection now %(NPCVoiceNames)
            Break 
        Else 
            DialogControl D1,Continue
    Rem End While

If MenuName Contains ShowHelp
    MessageBox "Voice Pack (C) ED Discovery team\r\n\r\nAdd-Ons verwenden | um diese Funktion zu aktivieren oder zu deaktivieren\r\nVerwenden Sie die Optionen zur Sprachkonfiguration im Menü Add-Ons, um die Sprachausgabe zu konfigurieren\r\nund Sprachpaketoptionen einzustellen","Voice Pack"

    If MenuName Contains ConfigureVerbosity

        Set lab = 10
        Set labw = 140
        Set col1 = 150
        Set col2 = 400
        Set col3 = 650
        Set colw = 240
        Set ls = +30
        Set lsm = +40
        Set width = 1000
        Set Def = ""
        Set dvar1a = "L2,Label,\"Speech file\",%(lab),%(lsm),%(labw),20,\"\""
        Set dvar1b = "TBLF,TextBox,\"%existsdefault(SpeechLog,Def)\",%(col1),+0,%(colw),20,\"Leer bedeutet, dass keine Sprachdatei vorhanden ist, ansonsten die Datei eingeben oder durchsuchen\""
        Set dvar1c = "BBROWSE,Button,Browse,%(col2),+0,78,20,\"Datei auswählen, in die die Sprachausgabe geschrieben werden soll\""

        Set dvar2a = "CBPR,CheckBox,\"Datum/Uhrzeit im Protokoll drucken\",%(col1),%(ls),%(colw),20,\"Uhrzeit und Datum vor dem Text drucken\",%IsPresent(SpeechControls,\"LogTimeDate;\",0)"
        Set dvar2b = "CBLL,CheckBox,\"Nur letztes protokollieren\",%(col2),+0,%(colw),20,\"Protokoll vor jeder Sprachausgabe löschen\",%IsPresent(SpeechControls,\"LogLastOnly;\",0)"

        Set dvar3a = "L2,Label,\"General\",%(lab),%(lsm),%(labw),20,\"\""
        Set dvar3b = "CBD,CheckBox,\"Sprachausgabe deaktivieren\",%(col1),+0,%(colw),20,\"Sprachausgabe deaktivieren, nur Textausgabe aktiviert\",%IsPresent(SpeechControls,\"PrintOnly;\",0)"
        Set dvar3c = "CBSSML,CheckBox,\"SSML deaktivieren\",%(col2),+0,%(colw),20,\"SSML deaktivieren (Neustart von ED erforderlich)\",%IsPresent(SpeechControls,\"SSMLDisable;\",0)"
        Set dvar3d = "CBWEL,CheckBox,\"Willkommensnachricht deaktivieren\",%(col3),+0,%(colw),20,\"Die Willkommensnachricht deaktivieren\",%IsPresent(SpeechControls,\"WelcomeMessageDisable;\",1)"
        Set dvar3e = "CBSUB,CheckBox,\"Untertitel\",%(col1),%(ls),%(colw),20,\"Untertitelbox einschalten\",%IsPresent(SpeechControls,\"Subtitles;\",1)"
        Set dvar4b = "CBFR,CheckBox,\"Freundesstatus deaktivieren\",%(col2),+0,%(colw),20,\"Freundesstatus online/offline ist stummgeschaltet\",%IsPresent(SpeechControls,\"FriendsStatusDisable;\",1)"

        Set dvar5a = "L3,Label,\"Texts\",%(lab),%(lsm),%(labw),20,\"\""
        Let npcdisable = "!%IsPresent(SpeechControls,\"NPCChatterDisable;\",0)"

        Set dvar5b = "CBN1,CheckBox,\"NPC-Texte aktivieren\",%(col1),+0,%(colw),20,\"Alle NPC-Texte aktivieren\",%(npcdisable)"    // name kept for backwards compat
        Set dvar5c = "CBNS,CheckBox,\"NPC-Sounds deaktivieren\",%(col2),+0,%(colw),20,\"Intro/Out-Sounds bei NPC-Texten deaktivieren\",%IsPresent(SpeechControls,\"NPCSoundsDisable;\",1)"
        Set dvar5d = "CBNMV,CheckBox,\"NPC Unterschiedliche Stimmen\",%(col3),+0,%(colw),20,\"Wähle verschiedene Stimmen für jeden NPC\",%IsPresent(SpeechControls,\"NPCVoicesEnable;\",1)"
        Set dvar5z = "CBNTV,CheckBox,\"Texts Different Voices\",%(col1),%(ls),%(colw),20,\"Use Different voices for each text message\",%IsPresent(SpeechControls,\"TEXTVoicesEnable;\",0)"

        Set dvar5e = "CBN2,CheckBox,\"Geschwadertexte aktivieren\",%(col1),%(ls),%(colw),20,\"Alle Staffeltexte aktivieren\",%IsPresent(SpeechControls,\"SquadronTextsEnable;\",0)"
        Set dvar5f = "CBN3,CheckBox,\"Geschwadertexte aktivieren\",%(col2),+0,%(colw),20,\"Alle Geschwadertexte aktivieren\",%IsPresent(SpeechControls,\"WingTextsEnable;\",0)"
        Set dvar5g = "CBN4,CheckBox,\"Lokale Texte aktivieren\",%(col3),+0,%(colw),20,\"Alle lokalen Texte aktivieren\",%IsPresent(SpeechControls,\"LocalTextsEnable;\",0)"

        Set dvar5h = "CBN5,CheckBox,\"Freundestexte aktivieren\",%(col1),%(ls),%(colw),20,\"Alle Freundestexte aktivieren\",%IsPresent(SpeechControls,\"FriendTextsEnable;\",0)"
        Set dvar5j = "CBN6,CheckBox,\"VoiceChat-Texte aktivieren\",%(col2),+0,%(colw),20,\"Alle Voice-Chat-Texte aktivieren\",%IsPresent(SpeechControls,\"VoiceChatTextsEnable;\",0)"
        Set dvar5k = "CBN7,CheckBox,\"SternSystem-Texte aktivieren\",%(col3),+0,%(colw),20,\"Alle Sternsystemtexte aktivieren\",%IsPresent(SpeechControls,\"StarSystemTextsEnable;\",0)"

        Set dvar5m = "CBN8,CheckBox,\"Spielertexte aktivieren\",%(col1),%(ls),%(colw),20,\"Alle Spielertexte aktivieren\",%IsPresent(SpeechControls,\"PlayerTextsEnable;\",0)"
        Set dvar5n = "CBN9,CheckBox,\"Alle anderen Texte aktivieren\",%(col2),+0,%(colw),20,\"Andere Arten von Texten aktivieren\",%IsPresent(SpeechControls,\"AnyOtherTextsEnable;\",0)"

        Set dvar6a = "L3,Label,\"FSA Sprung\",%(lab),%(lsm),%(labw),20,\"\""
        Set dvar6b = "CBF,CheckBox,\"Systeminfo nur erster Sprung\",%(col1),+0,%(colw),20,\"Systeminformationen nur beim ersten Sprung zum System ansagen\",%IsPresent(SpeechControls,\"FirstJumpOnly;\",0)"
        Set dvar6c = "CBFL,CheckBox,\"Berichte über den Treibstoffstand deaktivieren\",%(col2),+0,%(colw),20,\"Treibstoffstandberichte deaktivieren\",%IsPresent(SpeechControls,\"FuelLevelDisable;\",0)"
        Set dvar6d = "CBFR,CheckBox,\"Fraktionsberichte deaktivieren\",%(col3),+0,%(colw),20,\"Fraktionsberichte bei FSA-Sprüngen deaktivieren\",%IsPresent(SpeechControls,\"FSDFactionDisable;\",0)"

        Set dvar7a = "L3,Label,\"Sterntypen ausschließen\",%(lab),%(lsm),%(labw),20,\"\""
        Set dvar7b = "TBSTAR,TextBox,\"%existsdefault(SpeechEDSMStarExclusion,Def)\",%(col1),+0,%(colw),20,\"Schließen Sie diese Sterne vom Auslesen der nach dem Sprung gelesenen Systeminformationen aus, Sterntypen OBAFGKM, H,N,TTS, Wx etc, durch Komma oder Leerzeichen getrennt\""

        Set dvar8a = "L3,Label,\"Scannen\",%(lab),%(lsm),%(labw),20,\"\""
        Set dvar8b = "CBSM,CheckBox,\"Sternmasse/Mag deaktivieren\",%(col1),+0,%(colw),20,\"Deaktivieren Sie Scan-Berichte über Masse und Helligkeit von Sternen\",%IsPresent(SpeechControls,\"ScanStarMassDisable;\",0)"
        Set dvar8c1 = "CBSAS,CheckBox,\"Auto-Scan aktivieren\",%(col3),+0,%(colw),20,\"Aktivieren Sie das Aufsagen automatisch gescannter Einträge\",%IsPresent(SpeechControls,\"ScanAutoScanEnable;\",0)"

        Set dvar8d = "CBPB,CheckBox,\"Planet Grundlagen deaktivieren\",%(col1),%(ls),%(colw),20,\"Deaktivieren Sie Scan-Berichte von Planeten Landbarer Zustand, Atmosphäre\",%IsPresent(SpeechControls,\"ScanPlanetBasicInformationDisable;\",0)"
        Set dvar8e = "CBPCR,CheckBox,\"Credits deaktivieren\",%(col2),+0,%(colw),20,\"Credits Berichte deaktivieren\",%IsPresent(SpeechControls,\"ScanPlanetCreditsDisable;\",0)"
        Set dvar8f = "CBPDS,CheckBox,\"Distanz deaktivieren\",%(col3),+0,%(colw),20,\"Entfernungsberichte aktivieren\",%IsPresent(SpeechControls,\"ScanPlanetDistanceDisable;\",0)"

        Set dvar8g = "CBPF,CheckBox,\"Planet Erweitert aktivieren\",%(col1),%(ls),%(colw),20,\"Aktivieren Sie Scan-Berichte über erweiterte Informationen zu Planeten\",%IsPresent(SpeechControls,\"ScanPlanetExtendedInformationEnable;\",0)"
        Set dvar8h = "CBPM,CheckBox,\"Planet Materialien aktivieren\",%(col2),+0,%(colw),20,\"Aktivieren von Scan-Berichten über Planetenmaterialien\",%IsPresent(SpeechControls,\"ScanPlanetMaterialInformationEnable;\",0)"
        Set dvar8i = "CBBC,CheckBox,\"Gürtelcluster aktivieren\",%(col3),+0,%(colw),20,\"Aktivieren Sie Scan-Berichte von Gürtel Klustern\",%IsPresent(SpeechControls,\"ScanPlanetBeltClusters;\",0)"

        Set dvar8j = "L3,Label,\"Mindestwert:\",%(col1),%(ls),80,20,\"\""
        Set dvar8k = "TBSV,TextBox,\"%existsdefault(SpeechMinScanValue,'0')\",230,+0,120,20,\"Legen Sie den Mindestwert der zu berichtenden Scans fest\""
        Set dvar8l = "CBDF,CheckBox,\"Nicht entdeckt\",%(col2),+0,%(colw),20,\"Nur Berichte über Scans mit deaktivierter Entdeckungsmarkierung\",%IsPresent(SpeechControls,\"ScanNotDiscovered;\",0)"
        Set dvar8m = "CBMF,CheckBox,\"Nicht kartographiert\",%(col3),+0,%(colw),20,\"Nur Berichte über Scans mit deaktiviertem Mapping-Flag\",%IsPresent(SpeechControls,\"ScanNotMapped;\",0)"

        Set dvar9a = "L3,Label,\"EDSM\",10,%(lsm),80,20,\"\""
        Set dvar9b = "CBED,CheckBox,\"EDSM-Info deaktivieren\",%(col1),+0,%(colw),20,\"Deaktivieren aller EDSM-Suchvorgänge für Systeminformationen\",%IsPresent(SpeechControls,\"EDSMInformationDisable;\",0)"
        Set dvar9c = "CBES,CheckBox,\"Kurzer Überblick\",%(col2),+0,%(colw),20,\"Erstelle eine kurze Zusammenfassung anstelle der vollständigen Informationen\",%IsPresent(SpeechControls,\"EDSMSummaryEnable;\",0)"
        Set dvar9d = "CBEM,CheckBox,\"Mond-Informationen\",%(col3),+0,%(colw),20,\"Mondinformationen ansagen\",%IsPresent(SpeechControls,\"EDSMMoonsEnable;\",0)"
        Set dvar9e = "CBESM,CheckBox,\"Untermond-Informationen\",%(col1),%(ls),%(colw),20,\"Untermondinformationen ansagen\",%IsPresent(SpeechControls,\"EDSMSubMoonsEnable;\",0)"
        Set dvar9f = "CBEAT,CheckBox,\"Information zur Atmosphäre\",%(col2),+0,%(colw),20,\"Atmosphäreninformationen für Planeten ansagen\",%IsPresent(SpeechControls,\"EDSMAtmosphereEnable;\",1)"
        Set dvar9g = "CBEVC,CheckBox,\"Informationen zum Vulkanismus\",%(col3),+0,%(colw),20,\"Vulkanismus-Informationen für Planeten ansagen\",%IsPresent(SpeechControls,\"EDSMVolcanismEnable;\",1)"
        Set dvar9h = "CBEMA,CheckBox,\"Informationen zu Materialien\",%(col1),%(ls),%(colw),20,\"Materialinformationen für Planeten ansagen\",%IsPresent(SpeechControls,\"EDSMMaterialsEnable;\",0)"
        Set dvar9i = "CBEMFD,CheckBox,\"EDSM-Erstaufklärung deaktivieren\",%(col2),+0,%(colw),20,\"Deaktivieren Sie die EDSM-Ersterkennungsmeldung\",%IsPresent(SpeechControls,\"EDSMFDDisable;\",0)"

        Set dvar10a = "L3,Label,\"Nav-Bake\",%(lab),%(lsm),%(labw),20,\"\""
        Set dvar10b = "CBXNav,ComboBox,\"%ExistsDefault(SpeechNavBeacon,'Summary')\",%(col1),+0,%(colw),20,\"Auswählen, was nach dem Scannen einer Navigationsbake angesagt wird\",Summary,No Speech on Scan,Full Scan Speech"

        Set dvar11a = "L3,Label,\"Zielen\",%(lab),%(lsm),%(labw),20,\"\""
        Set dvar11b = "CBTarget,CheckBox,\"Zielberichte deaktivieren\",%(col1),+0,%(colw),20,\"Deaktivieren aller Meldungen über anvisierte Schiffe\",%IsPresent(SpeechControls,\"TargetReportingDisabled;\",0)"

        Set dvar12a = "L3,Label,\"Odyssey\",%(lab),%(lsm),%(labw),20,\"\""
        Set dvar12b = "CBODYSW,CheckBox,\"Disable Sel Weapon\",%(col1),+0,%(colw),20,\"Disable the Selected Weapon message\",%IsPresent(SpeechControls,\"ODYDisSelWeapon;\",0)"

        Set dvarok = "OK,Button,\"OK\",%eval(%(width)-140),%(lsm),120,20,\"Für OK drücken\""
        Set dvarcancel = "Cancel,Button,\"Cancel\",%eval(%(width)-280),+0,120,20,\"Zum Abbrechen drücken\""

        Dialog D1, "Voice Pack Konfiguration", "%(width),750", dvar

        While D1 $!= Cancel And D1 $!= Escape
            If D1 $== BBROWSE
                FileDialog savefile,c:,"Log files|*.log|All Files|*.*",*.log,on
                If FileName IsNotEmpty
                    DialogControl D1,Set TBLF=%(FileName)

            If D1 $== OK
                Let good = 1

                PersistentGlobal SpeechControls = ""

                // in order
                Call SetSO(ctrl="CBPR",flag="LogTimeDate;")
                Call SetSO(ctrl="CBLL",flag="LogLastOnly;")
                Call SetSO(ctrl="CBD",flag="PrintOnly;")

                Call SetSO(ctrl="CBFR",flag="FriendsStatusDisable;")
                Call SetSO(ctrl="CBWEL",flag="WelcomeMessageDisable;")
                Call SetSO(ctrl="CBSUB",flag="Subtitles;")

                Call SetSO(ctrl="CBSSML",flag="SSMLDisable;")

                Call SetSO(ctrl="CBN1",flag="NPCChatterDisable;",State=0)
                Call SetSO(ctrl="CBNS",flag="NPCSoundsDisable;")
                Call SetSO(ctrl="CBN2",flag="SquadronTextsEnable;")
                Call SetSO(ctrl="CBN3",flag="WingTextsEnable;")
                Call SetSO(ctrl="CBN4",flag="LocalTextsEnable;")
                Call SetSO(ctrl="CBN5",flag="FriendTextsEnable;")
                Call SetSO(ctrl="CBN6",flag="VoiceChatTextsEnable;")
                Call SetSO(ctrl="CBN7",flag="StarSystemTextsEnable;")
                Call SetSO(ctrl="CBN8",flag="PlayerTextsEnable;")
                Call SetSO(ctrl="CBN9",flag="AnyOtherTextsEnable;")
                Call SetSO(ctrl="CBNMV",flag="NPCVoicesEnable;")
                Call SetSO(ctrl="CBNTV",flag="TEXTVoicesEnable;")

                Call SetSO(ctrl="CBF",flag="FirstJumpOnly;")
                Call SetSO(ctrl="CBFL",flag="FuelLevelDisable;")
                Call SetSO(ctrl="CBFR",flag="FSDFactionDisable;")

                Call SetSO(ctrl="CBSM",flag="ScanStarMassDisable;")
                Call SetSO(ctrl="CBSAS",flag="ScanAutoScanEnable;")
                Call SetSO(ctrl="CBPB",flag="ScanPlanetBasicInformationDisable;")
                Call SetSO(ctrl="CBPCR",flag="ScanPlanetCreditsDisable;")
                Call SetSO(ctrl="CBPDS",flag="ScanPlanetDistanceDisable;")
                Call SetSO(ctrl="CBPF",flag="ScanPlanetExtendedInformationEnable;")
                Call SetSO(ctrl="CBPM",flag="ScanPlanetMaterialInformationEnable;")
                Call SetSO(ctrl="CBBC",flag="ScanPlanetBeltClusters;")
                Call SetSO(ctrl="CBDF",flag="ScanNotDiscovered;")
                Call SetSO(ctrl="CBMF",flag="ScanNotMapped;")

                Call SetSO(ctrl="CBED",flag="EDSMInformationDisable;")
                Call SetSO(ctrl="CBES",flag="EDSMSummaryEnable;")
                Call SetSO(ctrl="CBEM",flag="EDSMMoonsEnable;")
                Call SetSO(ctrl="CBESM",flag="EDSMSubMoonsEnable;")
                Call SetSO(ctrl="CBEAT",flag="EDSMAtmosphereEnable;")
                Call SetSO(ctrl="CBEVC",flag="EDSMVolcanismEnable;")
                Call SetSO(ctrl="CBEMA",flag="EDSMMaterialsEnable;")
                Call SetSO(ctrl="CBEMFD",flag="EDSMFDDisable;")

                Call SetSO(ctrl="CBTarget",flag="TargetReportingDisabled;")

                Call SetSO(ctrl="CBODYSW",flag="ODYDisSelWeapon;")

                Rem print Result %(SpeechControls)

                DialogControl D1,Get TBSTAR
                PersistentGlobal SpeechEDSMStarExclusion = %(DialogResult)

                DialogControl D1,Get CBXNav
                PersistentGlobal SpeechNavBeacon = %(DialogResult)

                DialogControl D1,Get TBSV
                PersistentGlobal SpeechMinScanValue = %(DialogResult)

                DialogControl D1,Get TBLF
                If DialogResult IsNotEmpty And good IsTrue
                    If %fileexists(DialogResult) IsTrue
                        PersistentGlobal SpeechLog = %(DialogResult)
                    Else 
                        Let success = %openfile(h1,DialogResult,create)
                        If success IsTrue
                            // Print test write to %(DialogResult)
                            Expr %writeline(h1,"Speech output file")
                            Expr %closefile(h1)
                            PersistentGlobal SpeechLog = %(DialogResult)
                        Else 
                            MessageBox "Sprachprotokollpfad(Log) ungültig","Fehlerhafter Dateiname angegeben"
                            Let good = 0
                Else 
                    PersistentGlobal SpeechLog = ""

                If good IsTrue
                    Break 

            DialogControl D1,Continue

        DialogControl D1, Close

END PROGRAM

//*************************************************************
// SetSO
// Events: None
//*************************************************************
PROGRAM SetSO

If State NotPresent
    Let State = 1
DialogControl D1,Get %(ctrl)
If DialogResult == %(State)
    PersistentGlobal SpeechControls += %(flag)

END PROGRAM

//*************************************************************
// SelectedWeapon
// Events: UISelectedWeapon?(EventClass_EventRefresh IsFalse)
//*************************************************************
PROGRAM SelectedWeapon

Set previous = %existsdefault(Last_weapon,"")
Set next = %(EventClass_SelectedWeapon)

Rem print running selected weapon with %(previous) vs %(next)

Set speech = ""

If next $== ""
    If previous Contains wpn_
        Set speech = %expand(say_UISelectedUnarmedFromWeapon)
Else If next Contains $humanoid_fists
    If previous Contains wpn_
        Set speech = %expand(say_UISelectedUnarmedFromWeapon)
Else If next Contains wpn_
    Set speech = %expand(say_UISelectedWeapon)
Else 
    Set speech = %expand(say_UISelectedTool)

If SpeechControls NotPresent Or SpeechControls NotContains ODYDisSelWeapon;
    If speech $!= ""
        Set speech = %phrase(speech,"<;>","{{{","}}}")
        Call speak(speech="%(speech)",Volume="%existsdefault(Volume,'-999')")

Static Last_weapon = %(next)

END PROGRAM

//*************************************************************
// Music
// Events: UIMusic?(EventClass_EventRefresh IsFalse)
//*************************************************************
PROGRAM Music

If EventClass_MusicTrackID $== DockingComputer
    Static DockingMusic = 1
Else 
    Static DockingMusic = 0

// print Music Event %(EventClass_Track) : %(EventClass_MusicTrackID) 
// print %(DockingMusic)

END PROGRAM

//*************************************************************
// DockingCancelled
// Events: DockingCancelled
//*************************************************************
PROGRAM DockingCancelled

Set v = say_DockingCancelled
Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'
Set prior = "%existsdefault(Priority,\"Normal\")"               // pick up config variables
Set queuelimit = %existsdefault(QueueLimit,'0')
Call speak(speech="%(speech)",Volume="%existsdefault(Volume,'-999')",Priority="%(prior)", QueueLimit="%(queuelimit)")
Timer -VoicePackDockingGrantedDelay

END PROGRAM

//*************************************************************
// DockingGrantedResponse
// Events: onTimer?(TimerName Contains VoicePackDockingGrantedDelay)
//*************************************************************
PROGRAM DockingGrantedResponse

Event From %(EventJID) INFO
// print docking granted response for %(EventClass_FDStationType) on pad %(EventClass_LandingPad)
// pragma dumpvars EC*

Set dockingcomputer = %FindInArray(EC_Ship_Module,_Item,"Docking Computer",0,1000,contains;ignoremissing)
Set starports = Orbis;Coriolis;Bernal;Ocellus;AsteroidBase

// print DGR %(dockingcomputer) : %(DockingMusic)

If dockingcomputer != -1 And DockingMusic == 1
    Set v = say_DockingComputer
    Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'
Else If %(EventClass_FDStationType) MatchSemicolon %(starports)
    Set v = say_DockingGrantedCO
    Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'
    If %(EventClass_LandingPad) <= 4
        Set speech += " %(say_DockingGranted6) %wordof(say_DockingGrantedD4,EventClass_LandingPad)"
    Else If %(EventClass_LandingPad) <= 8
        Let lp = %(EventClass_LandingPad)-4
        Set speech += " %(say_DockingGranted7) %wordof(say_DockingGrantedD4,lp)"
    Else If %(EventClass_LandingPad) <= 10
        Let lp = %(EventClass_LandingPad)-8
        Set speech += " %(say_DockingGranted8) %wordof(say_DockingGrantedD2,lp)"
    Else If %(EventClass_LandingPad) <= 15
        Let lp = %(EventClass_LandingPad)-10
        Set speech += " %(say_DockingGranted9) %wordof(say_DockingGrantedD5,lp)"
    Else If %(EventClass_LandingPad) <= 19
        Let lp = %(EventClass_LandingPad)-15
        Set speech += " %(say_DockingGranted10) %wordof(say_DockingGrantedD4,lp)"
    Else If %(EventClass_LandingPad) <= 23
        Let lp = %(EventClass_LandingPad)-19
        Set speech += " %(say_DockingGranted11) %wordof(say_DockingGrantedD4,lp)"
    Else If %(EventClass_LandingPad) <= 25
        Let lp = %(EventClass_LandingPad)-23
        Set speech += " %(say_DockingGranted12) %wordof(say_DockingGrantedD2,lp)"
    Else If %(EventClass_LandingPad) <= 30
        Let lp = %(EventClass_LandingPad)-25
        Set speech += " %(say_DockingGranted1) %wordof(say_DockingGrantedD5,lp)"
    Else If %(EventClass_LandingPad) <= 34
        Let lp = %(EventClass_LandingPad)-30
        Set speech += " %(say_DockingGranted2) %wordof(say_DockingGrantedD4,lp)"
    Else If %(EventClass_LandingPad) <= 38
        Let lp = %(EventClass_LandingPad)-34
        Set speech += " %(say_DockingGranted3) %wordof(say_DockingGrantedD4,lp)"
    Else If %(EventClass_LandingPad) <= 40
        Let lp = %(EventClass_LandingPad)-38
        Set speech += " %(say_DockingGranted4) %wordof(say_DockingGrantedD2,lp)"
    Else 
        Let lp = %(EventClass_LandingPad)-40
        Set speech += " %(say_DockingGranted5) %wordof(say_DockingGrantedD5,lp)"

    Set v = say_DockingGrantedGRN
    Set speech += '%phrase("%indirect(v)","<;>","{{{","}}}")'
Else 
    Set v = say_DockingGranted
    Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'

If speech IsNotEmpty
    Set prior = "%existsdefault(Priority,\"Normal\")"           // pick up config variables
    Set queuelimit = %existsdefault(QueueLimit,'0')
    Call speak(speech="%(speech)",Volume="%existsdefault(Volume,'-999')",Priority="%(prior)", QueueLimit="%(queuelimit)")

END PROGRAM

//*************************************************************
// ApproachBody
// Events: ApproachBody(QueueLimit=20000)
//*************************************************************
PROGRAM ApproachBody

Scan "%(EventClass_StarSystem)" "%(EventBodyName)"
Rem pragma dumpvars S_*

If %(S_BodyFound) IsTrue And S_Body_gravityg IsPresent And %(S_Body_gravityg) $!= "" And %(S_Body_gravityg) >= 2.0
    Set v = say_ApproachBodyWarning
Else 
    Set v = say_ApproachBody

Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// GenericResponse
// Events: Bounty, BuyAmmo, CapShipBond, CockpitBreached(Volume=100), DockFighter, EscapeInterdiction, FactionKillBond, FighterDestroyed
// Events: FighterRebuilt, Interdicted, LaunchFighter, PayFines, PayBounties, PayLegacyFines, PVPKill, RedeemVoucher, Scanned
// Events: CollectCargo, CommunityGoalDiscard, CommunityGoalJoin, CommunityGoalReward, ChangeCrewRole, CrewAssign, CrewFire
// Events: CrewHire, CrewLaunchFighter, CrewMemberJoins, CrewMemberRoleChange, CrewMemberQuits, EndCrewSession, JoinACrew
// Events: KickCrewMember, NpcCrewPaidWage, NpcCrewRank, QuitACrew, EngineerApply, EngineerCraft, EngineerContribution, EngineerProgress
// Events: EngineerLegacyConvert, Synthesis, TechnologyBroker, BuyExplorationData, CodexEntry, DiscoveryScan, FSSDiscoveryScan
// Events: SAAScanComplete, SAASignalsFound, ApproachSettlement(QueueLimit=20000), Docked, DockingDenied, DockingRequested
// Events: DockingTimeout, DockSRV, FuelScoop(QueueLimit=3000), JetConeBoost, JetConeDamage, LeaveBody(QueueLimit=5000), LaunchSRV
// Events: Liftoff, StartJump(Priority=HighClear), SupercruiseEntry, Touchdown, Undocked, USSDrop, MissionAbandoned, MissionAccepted
// Events: MissionCompleted, MissionFailed, MissionRedirected, AsteroidCracked, MiningRefined, MaterialCollected, MaterialDiscarded
// Events: MaterialDiscovered, MaterialTrade, ClearSavedGame, Died, DatalinkScan, DatalinkVoucher, DataScanned, Promotion
// Events: Resurrect, ScientificResearch, Screenshot, SearchAndRescue, SendText, PowerplayCollect, PowerplayDefect, PowerplayDeliver
// Events: PowerplayFastTrack, PowerplayJoin, PowerplayLeave, PowerplaySalary, PowerplayVote, PowerplayVoucher, AfmuRepairs
// Events: BuyDrones, FetchRemoteModule, HeatDamage, HeatWarning, LaunchDrone, MassModuleStore, ModuleBuy, ModuleRetrieve
// Events: ModuleSell, ModuleSellRemote, ModuleStore, ModuleSwap, SellShipOnRebuy, SellDrones, SetUserShipName, ShipyardBuy
// Events: ShipyardNew, ShipyardSell, ShipyardSwap, ShipyardTransfer, SRVDestroyed, RebootRepair, RefuelAll, RefuelPartial
// Events: Repair, RepairDrone, RepairAll, RestockVehicle, SelfDestruct, SystemsShutdown, VehicleSwitch, AppliedToSquadron
// Events: DisbandedSquadron, InvitedToSquadron, JoinedSquadron, KickedFromSquadron, LeftSquadron, SharedBookmarkToSquadron
// Events: SquadronCreated, SquadronDemotion, SquadronPromotion, WonATrophyForSquadron, BuyTradeData, CargoDepot, EjectCargo
// Events: MarketBuy, WingAdd, WingJoin, WingLeave, WingInvite, BuyWeapon, CollectItems, CreateSuitLoadout, DeleteSuitLoadout
// Events: Disembark, DropItems, DropShipDeploy, Embark, LoadoutEquipModule, LoadoutRemoveModule, RenameSuitLoadout, ScanOrganic
// Events: SellOrganicData, SellSuit, SellWeapon, SuitLoadout, SwitchSuitLoadout, UpgradeSuit, UpgradeWeapon, UseConsumable
// Events: onTimer?(TimerName Contains VoicePackGenericDelay)
//*************************************************************
PROGRAM GenericResponse

Rem mandatory: Event Variables..
Rem optional: QueueLimit
Rem optional: Prior
Rem optional: Volume
Rem pragma dumpvars Event*

Set v = say_%(EventClass_EventTypeStr)
Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'

If speech IsNotEmpty
    Set prior = "%existsdefault(Priority,\"Normal\")"           // pick up config variables
    Set queuelimit = %existsdefault(QueueLimit,'0')
    Call speak(speech="%(speech)",Volume="%existsdefault(Volume,'-999')",Priority="%(prior)", QueueLimit="%(queuelimit)")

END PROGRAM

//*************************************************************
// GenericResponseUI
// Events: UILights?(EventClass_EventRefresh IsFalse)(QueueLimit=2000), UIFireGroup?(EventClass_EventRefresh IsFalse)(QueueLimit=200)
// Events: UIShieldsUp?(EventClass_EventRefresh IsFalse)(QueueLimit=2000), UILandingGear?(EventClass_EventRefresh IsFalse)(QueueLimit=2000)
// Events: UIHardpointsDeployed?(EventClass_EventRefresh IsFalse)(QueueLimit=2000), UIInWing?(EventClass_EventRefresh IsFalse)(QueueLimit=2000)
// Events: UICargoScoopDeployed?(EventClass_EventRefresh IsFalse)(QueueLimit=2000), UISilentRunning?(EventClass_EventRefresh IsFalse)(QueueLimit=2000)
// Events: UIScoopingFuel?(EventClass_EventRefresh IsFalse)(QueueLimit=2000), UISrvHandbrake?(EventClass_EventRefresh IsFalse)(QueueLimit=2000)
// Events: UISrvTurret?(EventClass_EventRefresh IsFalse)(QueueLimit=2000), UISrvUnderShip?(EventClass_EventRefresh IsFalse)(QueueLimit=2000,MaxRepeat=20000)
// Events: UIFsdMassLocked?(EventClass_EventRefresh IsFalse)(QueueLimit=2000,MaxRepeat=20000), UIFsdCharging?(EventClass_EventRefresh IsFalse)(QueueLimit=2000)
// Events: UIFsdCooldown?(EventClass_EventRefresh IsFalse)(QueueLimit=2000), UILowFuel?(EventClass_EventRefresh IsFalse), UIOverHeating?(EventClass_EventRefresh IsFalse)(QueueLimit=5000)
// Events: UIBeingInterdicted?(EventClass_EventRefresh IsFalse), UIShipTargeted?(EventClass_ShipTargeted_TargetLocked == 0 And EventClass_EventRefresh IsFalse)
// Events: UIGlideMode?(EventClass_EventRefresh IsFalse And EventClass_GlideMode IsFalse)
//*************************************************************
PROGRAM GenericResponseUI

Rem Input variables:
Rem mandatory: Event Variables..
Rem optional: QueueLimit - maximum queue allowed
Rem optional: Priority - priority of speech
Rem optional: Volume - % of volume, 0 -100.
Rem optional: MaxRepeat - maximum repeat rate (10s means don't say more than 10s apart)

Rem Pragma dumpvars EventClass* dumpvars Max*

If MaxRepeat IsPresent                                          // MaxRepeat prevents a message being said more than MaxRepeat ms.
    Set maxrepeatvar = MaxRepeatLastTime_%(EventClass_EventTypeStr)
    Set lasttime = 0
    If %Exist(%(maxrepeatvar)) IsTrue
        Set lasttime = %expand(%(maxrepeatvar))

    Set curtime = %TickCount()
    Let timedelta = %(curtime) - %(lasttime)
    Rem print last = %(lasttime) cur = %(curtime) delta = %(timedelta)  MaxRepeat = %(MaxRepeat)

    If timedelta < %(MaxRepeat)
        Rem print Rejecting due to too quick
        Return 
    Else 
        Static %(maxrepeatvar) = %(curtime)

Set v = say_UI%(EventClass_EventTypeStr)
Set speech = '%phrase("%indirect(v)","<;>","{{{","}}}")'

If speech IsNotEmpty
    Set prior = "%existsdefault(Priority,\"Normal\")"           // pick up config variables
    Set queuelimit = %existsdefault(QueueLimit,'0')
    Rem Print UI queue %(speech) %(prior) %(queuelimit)
    Call speak(speech="%(speech)",Volume="%existsdefault(Volume,'-999')",Priority="%(prior)", QueueLimit="%(queuelimit)")

END PROGRAM

//*************************************************************
// GenericDelayedResponse
// Events: DockingGranted(Delay=15,DelayName=VoicePackDockingGrantedDelay), BookDropship(Delay=5000), BookTaxi(Delay=5000)
// Events: BuyMicroResources(Delay=100), BuySuit(Delay=100), CancelDropship(Delay=5000), CancelTaxi(Delay=5000)
//*************************************************************
PROGRAM GenericDelayedResponse

Rem Delay gives delay in ms before the timer triggers with the TimerName of VoicePack.. and Event variables set to the Event which triggered it.
Rem Optional, use DelayName to call the trigger name different from the standard one

If %exist(DelayName) IsTrue
    Timer %(DelayName),%(Delay),%(EventJID)
Else 
    Timer VoicePackGenericDelay%(EventClass_EventTypeStr),%(Delay),%(EventJID)

END PROGRAM

//*************************************************************
// speak
// Events: None
//*************************************************************
PROGRAM speak

Rem required: speech
Rem optional: Volume, QueueLimit, Priority, FinishEvent, Wait, Voice, PrefixSound, PostfixSound, MixSound, Rate
Rem EffectVars present: Add these effects in

Rem Print SAY: %(speech)

Set speech = "%replacevar(speech,\"say_tx\")"

Set ds = 0
If SpeechControls IsPresent And SpeechControls Contains PrintOnly;
    Set ds = 1

// if QueueLimit IsPresent
// print Queued %(QueueLimit) for %(speech)

// Print SAY: %(speech)

Say %(speech), Literal=1, Voice="%existsdefault(Voice,\"\")", Volume="%existsdefault(Volume,\"-999\")", Priority="%existsdefault(Priority,\"Normal\")", QueueLimit="%existsdefault(QueueLimit,'0')", DontSpeak="%(ds)", FinishEvent="%existsdefault(FinishEvent,\"\")" , Wait="%existsdefault(Wait,\"0\")" , Para ="%existsdefault(EffectVars,'')" , PrefixSound ="%existsdefault(PrefixSound,\"\")" , PostfixSound ="%existsdefault(PostfixSound,\"\")" , MixSound ="%existsdefault(MixSound,\"\")" , Rate ="%existsdefault(Rate,\"-999\")"

Rem print Say Said %(SaySaid) %(speech)
If SpeechControls IsPresent And SpeechControls Contains Subtitles; And SaySaid $!= !LIMIT
    Call subtitle(speech="%(SaySaid)")

If SpeechLog IsPresent And SpeechLog IsNotEmpty
    If SpeechControls IsPresent And SpeechControls Contains LogLastOnly;
        Let success = %openfile(h1,SpeechLog,create)
    Else 
        Let success = %openfile(h1,SpeechLog,append)

    If success IsTrue
        If SpeechControls IsPresent And SpeechControls Contains LogTimeDate;
            Expr %write(h1,"%datetimenow(tolocal):")

        Expr %writeline(h1,speech)
        Expr %closefile(h1)
    Else 
        Print Cannot write to speech log file '%(SpeechLog)'

END PROGRAM

//*************************************************************
// subtitle
// Events: None
//*************************************************************
PROGRAM subtitle

Set speech = %replace(speech, " , "," ")

DialogControl SDIAG,Exists
If %(Exists) == 0
    Set P=-,-,-,-
    If SubtitlePosition2 IsPresent
        Set P = %(SubtitlePosition2)
        DeleteVariable SubtitlePosition

    Set dvar1 = 'T1,Label,"",5,5,500,30,""'
    Set dvar2 = 'T2,Label,"",5,35,500,30,""'
    Set dvar3 = 'T3,Label,"",5,65,500,30,""'
    Set dvar4 = 'T4,Label,"",5,95,500,30,""'
    NonModalDialog SDIAG, "", "%(P)", dvar, AllowResize, NoPanelBorder, NoWindowsBorder, Transparent,  AlwaysOnTop, FontScale:1.5

DialogControl SDIAG,get T3
DialogControl SDIAG,set T4="%(DialogResult)"
DialogControl SDIAG,get T2
DialogControl SDIAG,set T3="%(DialogResult)"
DialogControl SDIAG,get T1
DialogControl SDIAG,set T2="%(DialogResult)"
DialogControl SDIAG,set T1="%(speech)"

END PROGRAM

//*************************************************************
// subtitleDialogControl
// Events: onNonModalDialog?(Dialog $== SDIAG)
//*************************************************************
PROGRAM subtitleDialogControl

Rem print "onNonModalDialog event %(Control)"

If Control $== Reposition Or Control $== Resize
    DialogControl SDIAG,position
    DialogControl SDIAG,size
    PersistentGlobal SubtitlePosition2 = "-,-,%(X),%(Y),-,-,-%(W),-%(H)"

    Rem print Dialog is at %(X),%(Y),%(W),%(H)
    Set dw = %(W)
    DialogControl SDIAG,controlbounds T1
    Rem print T1 is at %(X),%(Y),%(W),%(H)
    DialogControl SDIAG,controlbounds T1 %(X),%(Y),%eval('%(dw)-60'),%(H)
    DialogControl SDIAG,controlbounds T2
    Rem print T2 is at %(X),%(Y),%(W),%(H)
    DialogControl SDIAG,controlbounds T2 %(X),%(Y),%eval('%(dw)-60'),%(H)
    DialogControl SDIAG,controlbounds T3
    Rem print T3 is at %(X),%(Y),%(W),%(H)
    DialogControl SDIAG,controlbounds T3 %(X),%(Y),%eval('%(dw)-60'),%(H)
    DialogControl SDIAG,controlbounds T4
    Rem print T4 is at %(X),%(Y),%(W),%(H)
    DialogControl SDIAG,controlbounds T4 %(X),%(Y),%eval('%(dw)-60'),%(H)

If Control $== Cancel
    DialogControl SDIAG,Close

END PROGRAM

//*************************************************************
// SayPhoneme
// Events: onKeyPress?(KeyPress $== Alt+F12)
//*************************************************************
PROGRAM SayPhoneme

Call speak(speech="Hello boys")
Call speak(speech="Hello there",EffectVars="PitchShift=100,EchoMix=20,EchoFeedback=10,EchoDelay=100",Voice="Microsoft Hedda Desktop",Rate="2")

// use to test phoneme list
// Foreach v in say_tx_star*
// Foreach v in say_tx_power*
// set exp = %indirect(v)
// set exp = %substring(exp,%indexof(exp,'<phoneme'),1000)
// say %(exp)

// Set str = "<phoneme alphabet='ipa' ph = 'ˈakɜːnɑ'>AchenarFailed </phoneme>"
// Set str = "<phoneme alphabet='ipa' ph = 'm'>Failed </phoneme>"
// Set str = <phoneme alphabet='x-sampa' ph='bd'>Failed 3</phoneme>
// Print %(str)
// Say "%(str)"
// Ivona British Amy not working with phonemes, tried various things, not working

// InputBox "Enter phoneme","IPA:","%existsdefault(SayPhonemeLast,'')"
// If InputBox1 IsPresent
// Global SayPhonemeLast = %(InputBox1)
// Set str = <phoneme alphabet='ipa' ph = '%(InputBox1)'>Phoneme failed, this may be due to voice selected, for instance Ivona voices do not support all phonemes</phoneme>
// Print %(SayPhonemeLast)
// Say "%(SayPhonemeLast)"

END PROGRAM

//*************************************************************
// SurveyorPanel
// Events: onSurveyor
//*************************************************************
PROGRAM SurveyorPanel

Rem print VoicePack Surveyor Panel run `%(Body)` `%(BodyShortName)`
Rem pragma dumpvars EventName*
Rem pragma dumpvars Value*

Set speech = ""

ForEach eventn in EventName*
    Set data = %indirect("Value%(Index)")
    Set eventid = %indirect(eventn)

    Rem print .. Event %(Index) : %(eventid) : '%(data)'

    If "%exist(\"say_surveyor_%(eventid)\")" IsTrue
        Set speech += %expand("say_surveyor_%(eventid)")
    Else 
        Rem print "Rejected saying %(eventid)"

If speech IsNotEmpty
    Set speech = "%expand(say_surveyor_prefixphrase)%(speech)"
    Call speak(speech="%(speech)")

END PROGRAM

